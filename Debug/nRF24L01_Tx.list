
nRF24L01_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003840  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e8  080039e8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f0  080039f0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080039f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000020  08003a18  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003a18  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6e0  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dd5  00000000  00000000  0002d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  0002f508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  000302e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015fd0  00000000  00000000  00030fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a06d  00000000  00000000  00046f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088b77  00000000  00000000  00050ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9b74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000397c  00000000  00000000  000d9bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080039c0 	.word	0x080039c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080039c0 	.word	0x080039c0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a6e      	ldr	r2, [pc, #440]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b6c      	ldr	r3, [pc, #432]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b68      	ldr	r3, [pc, #416]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a67      	ldr	r2, [pc, #412]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b65      	ldr	r3, [pc, #404]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a60      	ldr	r2, [pc, #384]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b5e      	ldr	r3, [pc, #376]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b5a      	ldr	r3, [pc, #360]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a59      	ldr	r2, [pc, #356]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b57      	ldr	r3, [pc, #348]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a52      	ldr	r2, [pc, #328]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b50      	ldr	r3, [pc, #320]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a4b      	ldr	r2, [pc, #300]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b49      	ldr	r3, [pc, #292]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4846      	ldr	r0, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 800059c:	f001 fde0 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	4844      	ldr	r0, [pc, #272]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80005a6:	f001 fddb 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80005b0:	4842      	ldr	r0, [pc, #264]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80005b2:	f001 fdd5 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4619      	mov	r1, r3
 80005ca:	483d      	ldr	r0, [pc, #244]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005cc:	f001 fc2e 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80005d0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80005d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	2303      	movs	r3, #3
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4834      	ldr	r0, [pc, #208]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80005e6:	f001 fc21 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ea:	2303      	movs	r3, #3
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ee:	2303      	movs	r3, #3
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4831      	ldr	r0, [pc, #196]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 80005fe:	f001 fc15 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000602:	f649 730f 	movw	r3, #40719	; 0x9f0f
 8000606:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	2303      	movs	r3, #3
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4827      	ldr	r0, [pc, #156]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000618:	f001 fc08 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800061c:	2310      	movs	r3, #16
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000634:	f001 fbfa 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000638:	2310      	movs	r3, #16
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	481a      	ldr	r0, [pc, #104]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000650:	f001 fbec 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000654:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000658:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065a:	2303      	movs	r3, #3
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4817      	ldr	r0, [pc, #92]	; (80006c8 <MX_GPIO_Init+0x1f0>)
 800066a:	f001 fbdf 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800066e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000672:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_GPIO_Init+0x1e4>)
 8000684:	f001 fbd2 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin;
 8000688:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80006a2:	f001 fbc3 	bl	8001e2c <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	; 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40021c00 	.word	0x40021c00
 80006c8:	40020400 	.word	0x40020400

080006cc <statusStrcut_Init>:
static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	nrfStruct->statusStruct.dataReadIrq = 0;
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80006da:	f36f 0300 	bfc	r3, #0, #1
 80006de:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.dataSendIrq = 0;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80006e8:	f36f 0341 	bfc	r3, #1, #1
 80006ec:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.maxRetr = 0;
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80006f6:	f36f 0382 	bfc	r3, #2, #1
 80006fa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000704:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000708:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.txFull = 0;
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000712:	f36f 1386 	bfc	r3, #6, #1
 8000716:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	nrfStruct->statusStruct.packetsLost = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	nrfStruct->statusStruct.packetsRetr = 0;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct) {
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	/* Init settigns struct */
	nrfStruct->setStruct.rxMode = 0;			//set as receiver
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	7813      	ldrb	r3, [r2, #0]
 8000742:	f36f 0300 	bfc	r3, #0, #1
 8000746:	7013      	strb	r3, [r2, #0]
	nrfStruct->setStruct.channel = 0x02; 				//set channel np. 0
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2202      	movs	r2, #2
 800074c:	705a      	strb	r2, [r3, #1]
	nrfStruct->setStruct.dataRate = RF_DataRate_2M;  //lowest data rate
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	709a      	strb	r2, [r3, #2]
	nrfStruct->setStruct.powerRF = RF_PWR_0dBm;		//-12dBm power
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2203      	movs	r2, #3
 8000758:	70da      	strb	r2, [r3, #3]

	nrfStruct->setStruct.ard = 0;		//auto retr. delay 250us
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
	nrfStruct->setStruct.arc = 3;		//auto retr. counter
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2203      	movs	r2, #3
 8000764:	715a      	strb	r2, [r3, #5]

	nrfStruct->setStruct.enableCRC = 1;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7bd3      	ldrb	r3, [r2, #15]
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.codingCRC = 0;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7bd3      	ldrb	r3, [r2, #15]
 8000774:	f36f 0341 	bfc	r3, #1, #1
 8000778:	73d3      	strb	r3, [r2, #15]

	nrfStruct->setStruct.enableTxIrq = 0;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7bd3      	ldrb	r3, [r2, #15]
 800077e:	f36f 0382 	bfc	r3, #2, #1
 8000782:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableRxIrq = 0;
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7bd3      	ldrb	r3, [r2, #15]
 8000788:	f36f 03c3 	bfc	r3, #3, #1
 800078c:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableMaxRtIrq = 0;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7bd3      	ldrb	r3, [r2, #15]
 8000792:	f36f 1304 	bfc	r3, #4, #1
 8000796:	73d3      	strb	r3, [r2, #15]

	/* Pipe Enable - defult pipe 0 enable only */
	nrfStruct->setStruct.pipeEn = DF_RXADDR;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2203      	movs	r2, #3
 800079c:	719a      	strb	r2, [r3, #6]
	nrfStruct->setStruct.pipeACK = DF_EN_AA;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	223f      	movs	r2, #63	; 0x3f
 80007a2:	71da      	strb	r2, [r3, #7]
	nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	721a      	strb	r2, [r3, #8]

	/* Pipe RX Payload Lenght  */
	uint8_t i;
	for (i = 0; i < 6; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e007      	b.n	80007c0 <settingStruct_Init+0x8a>
		nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	725a      	strb	r2, [r3, #9]
	for (i = 0; i < 6; i++) {
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	3301      	adds	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b05      	cmp	r3, #5
 80007c4:	d9f4      	bls.n	80007b0 <settingStruct_Init+0x7a>
	}

	nrfStruct->setStruct.enableDPL = 0;
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	7bd3      	ldrb	r3, [r2, #15]
 80007ca:	f36f 1345 	bfc	r3, #5, #1
 80007ce:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableAckPay = 0;
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7bd3      	ldrb	r3, [r2, #15]
 80007d4:	f36f 1386 	bfc	r3, #6, #1
 80007d8:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableDynACK = 0;	//enable NO_ACK command
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	7bd3      	ldrb	r3, [r2, #15]
 80007de:	f36f 13c7 	bfc	r3, #7, #1
 80007e2:	73d3      	strb	r3, [r2, #15]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct) {
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	/* Init address struct */
	nrfStruct->addrStruct.addrWidth = longWidth;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2203      	movs	r2, #3
 80007fc:	741a      	strb	r2, [r3, #16]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e007      	b.n	8000814 <addressStruct_Init+0x24>
		nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	22e7      	movs	r2, #231	; 0xe7
 800080c:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < 5; i++) {
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3301      	adds	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d9f4      	bls.n	8000804 <addressStruct_Init+0x14>
	}
	for (i = 0; i < 5; ++i) {
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e007      	b.n	8000830 <addressStruct_Init+0x40>
		nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	22e7      	movs	r2, #231	; 0xe7
 8000828:	759a      	strb	r2, [r3, #22]
	for (i = 0; i < 5; ++i) {
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	3301      	adds	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	2b04      	cmp	r3, #4
 8000834:	d9f4      	bls.n	8000820 <addressStruct_Init+0x30>
	}
	for (i = 0; i < 5; ++i) {
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e007      	b.n	800084c <addressStruct_Init+0x5c>
		nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	22c2      	movs	r2, #194	; 0xc2
 8000844:	76da      	strb	r2, [r3, #27]
	for (i = 0; i < 5; ++i) {
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	3301      	adds	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d9f4      	bls.n	800083c <addressStruct_Init+0x4c>
	}
	nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	22c3      	movs	r2, #195	; 0xc3
 8000856:	f883 2020 	strb.w	r2, [r3, #32]
	nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	22c4      	movs	r2, #196	; 0xc4
 800085e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	22c5      	movs	r2, #197	; 0xc5
 8000866:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	22c6      	movs	r2, #198	; 0xc6
 800086e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct) {
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	/* Init fifo struct */
	nrfStruct->fifoStruct.txReUse = 0;
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800088c:	f36f 0300 	bfc	r3, #0, #1
 8000890:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.rxRead = 0;
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800089a:	f36f 0341 	bfc	r3, #1, #1
 800089e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxFull = 0;
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008a8:	f36f 0382 	bfc	r3, #2, #1
 80008ac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxEmpty = 1;
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.txSend = 0;
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008c4:	f36f 1304 	bfc	r3, #4, #1
 80008c8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txFull = 0;
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008d2:	f36f 1345 	bfc	r3, #5, #1
 80008d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txEmpty = 1;
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE) {
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	603b      	str	r3, [r7, #0]
	/* Put pointer of SPI and TIM structures to nRF alias */
	nrfStruct->nRFspi = HAL_SPIx;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
	nrfStruct->nRFtim = HAL_TIMx;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Put GPIO port pointer and pin number to structure's alias */
	nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
	nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	8b3a      	ldrh	r2, [r7, #24]
 8000918:	869a      	strh	r2, [r3, #52]	; 0x34
	nrfStruct->nRFportCE = HAL_GPIO_CE;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	69fa      	ldr	r2, [r7, #28]
 800091e:	639a      	str	r2, [r3, #56]	; 0x38
	nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	8c3a      	ldrh	r2, [r7, #32]
 8000924:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time) {
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	460b      	mov	r3, r1
 800093c:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0);	//Set star value as 0
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 8000948:	bf00      	nop
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3f8      	bcc.n	800094a <delayUs+0x18>
		;
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	f001 fbf2 	bl	8002160 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	f001 fbe2 	bl	8002160 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <ceHigh>:
void ceLow(nrfStruct_t *nrfStruct) {
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
			GPIO_PIN_RESET);
}
void ceHigh(nrfStruct_t *nrfStruct) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	f001 fbd2 	bl	8002160 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <readReg>:

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_REGISTER | addr;
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 80009d4:	f107 030f 	add.w	r3, r7, #15
 80009d8:	617b      	str	r3, [r7, #20]
	uint8_t *pReg = &reg;
 80009da:	f107 030e 	add.w	r3, r7, #14
 80009de:	613b      	str	r3, [r7, #16]

	csnLow(nrfStruct);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffbf 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009ea:	230a      	movs	r3, #10
 80009ec:	2201      	movs	r2, #1
 80009ee:	6979      	ldr	r1, [r7, #20]
 80009f0:	f002 f83c 	bl	8002a6c <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 80009f4:	2132      	movs	r1, #50	; 0x32
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff9b 	bl	8000932 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a00:	230a      	movs	r3, #10
 8000a02:	2201      	movs	r2, #1
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	f002 f965 	bl	8002cd4 <HAL_SPI_Receive>

	csnHigh(nrfStruct);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffba 	bl	8000984 <csnHigh>
	return reg;
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
 8000a26:	4613      	mov	r3, r2
 8000a28:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd = W_REGISTER | addr;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000a34:	f107 030b 	add.w	r3, r7, #11
 8000a38:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff92 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a44:	230a      	movs	r3, #10
 8000a46:	2201      	movs	r2, #1
 8000a48:	68f9      	ldr	r1, [r7, #12]
 8000a4a:	f002 f80f 	bl	8002a6c <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000a4e:	2132      	movs	r1, #50	; 0x32
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff6e 	bl	8000932 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a5a:	1cb9      	adds	r1, r7, #2
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f002 f804 	bl	8002a6c <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff8d 	bl	8000984 <csnHigh>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <readRegExt>:

/* Extended read and write functions - R/W few registers */
void readRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
		size_t bufSize) {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = R_REGISTER | addr;
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 8000a86:	f107 0313 	add.w	r3, r7, #19
 8000a8a:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff ff69 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a96:	230a      	movs	r3, #10
 8000a98:	2201      	movs	r2, #1
 8000a9a:	6979      	ldr	r1, [r7, #20]
 8000a9c:	f001 ffe6 	bl	8002a6c <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000aa0:	2132      	movs	r1, #50	; 0x32
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff ff45 	bl	8000932 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f002 f90e 	bl	8002cd4 <HAL_SPI_Receive>
			SPI_TIMEOUT);

	csnHigh(nrfStruct);
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff ff63 	bl	8000984 <csnHigh>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <writeRegExt>:

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
		size_t bufSize) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = W_REGISTER | addr;
 8000ad6:	7afb      	ldrb	r3, [r7, #11]
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 8000ae0:	f107 0313 	add.w	r3, r7, #19
 8000ae4:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff3c 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000af0:	230a      	movs	r3, #10
 8000af2:	2201      	movs	r2, #1
 8000af4:	6979      	ldr	r1, [r7, #20]
 8000af6:	f001 ffb9 	bl	8002a6c <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000afa:	2132      	movs	r1, #50	; 0x32
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff ff18 	bl	8000932 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	f002 f8e1 	bl	8002cd4 <HAL_SPI_Receive>
	SPI_TIMEOUT);

	csnHigh(nrfStruct);
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff ff36 	bl	8000984 <csnHigh>
}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <writeTxPayload>:

	csnHigh(nrfStruct);
	return OK_CODE;
}

uint8_t writeTxPayload(nrfStruct_t *nrfStruct, uint8_t *buf, size_t bufSize) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	if (bufSize < 1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <writeTxPayload+0x16>
		return ERR_CODE;
 8000b32:	23ff      	movs	r3, #255	; 0xff
 8000b34:	e023      	b.n	8000b7e <writeTxPayload+0x5e>
	if (bufSize > 32)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d901      	bls.n	8000b40 <writeTxPayload+0x20>
		bufSize = 32;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	607b      	str	r3, [r7, #4]

	uint8_t cmd = W_TX_PAYLOAD;	//set command mask
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 8000b44:	f107 0313 	add.w	r3, r7, #19
 8000b48:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff ff0a 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b54:	230a      	movs	r3, #10
 8000b56:	2201      	movs	r2, #1
 8000b58:	6979      	ldr	r1, [r7, #20]
 8000b5a:	f001 ff87 	bl	8002a6c <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000b5e:	2132      	movs	r1, #50	; 0x32
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff fee6 	bl	8000932 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), buf, bufSize, SPI_TIMEOUT);//read payload
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	230a      	movs	r3, #10
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	f001 ff7b 	bl	8002a6c <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff ff04 	bl	8000984 <csnHigh>
	return OK_CODE;
 8000b7c:	2301      	movs	r3, #1
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <flushTx>:

	csnHigh(nrfStruct);
	return OK_CODE;
}
/* Flush functions */
uint8_t flushTx(nrfStruct_t *nrfStruct) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_TX;	//set command mask
 8000b8e:	23e1      	movs	r3, #225	; 0xe1
 8000b90:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000b92:	f107 030b 	add.w	r3, r7, #11
 8000b96:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fee3 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	68f9      	ldr	r1, [r7, #12]
 8000ba8:	f001 ff60 	bl	8002a6c <HAL_SPI_Transmit>
	csnHigh(nrfStruct);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fee9 	bl	8000984 <csnHigh>

	if (!readBit(nrfStruct, FIFO_STATUS, bit4)) {	//check FIFO status
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	2117      	movs	r1, #23
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f863 	bl	8000c82 <readBit>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d108      	bne.n	8000bd4 <flushTx+0x4e>
		nrfStruct->fifoStruct.txEmpty = 0;
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000bc8:	f36f 1386 	bfc	r3, #6, #1
 8000bcc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 8000bd0:	23ff      	movs	r3, #255	; 0xff
 8000bd2:	e007      	b.n	8000be4 <flushTx+0x5e>
	}

	nrfStruct->fifoStruct.txEmpty = 1;
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bde:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <flushRx>:
uint8_t flushRx(nrfStruct_t *nrfStruct) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_RX;	//set command mask
 8000bf4:	23e0      	movs	r3, #224	; 0xe0
 8000bf6:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000bf8:	f107 030b 	add.w	r3, r7, #11
 8000bfc:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff feb0 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c08:	230a      	movs	r3, #10
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	f001 ff2d 	bl	8002a6c <HAL_SPI_Transmit>
	csnHigh(nrfStruct);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff feb6 	bl	8000984 <csnHigh>

	if (!readBit(nrfStruct, FIFO_STATUS, bit0)) {	//check FIFO status
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2117      	movs	r1, #23
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 f830 	bl	8000c82 <readBit>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d108      	bne.n	8000c3a <flushRx+0x4e>
		nrfStruct->fifoStruct.rxEmpty = 0;
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000c2e:	f36f 03c3 	bfc	r3, #3, #1
 8000c32:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	e007      	b.n	8000c4a <flushRx+0x5e>
	}

	nrfStruct->fifoStruct.rxEmpty = 1;
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <pwrUp>:

}


/* Power control */
void pwrUp(nrfStruct_t *nrfStruct) {
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, CONFIG);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff feb1 	bl	80009c4 <readReg>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << 1);
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, CONFIG, tmp);
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	461a      	mov	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fed0 	bl	8000a1a <writeReg>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <readBit>:
	uint8_t tmp = readReg(nrfStruct, CONFIG);
	tmp &= (0 << 1);		//zmieniono OR na AND
	writeReg(nrfStruct, CONFIG, tmp);
}

uint8_t readBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70bb      	strb	r3, [r7, #2]
	uint8_t reg = readReg(nrfStruct, addr);
 8000c92:	78fb      	ldrb	r3, [r7, #3]
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fe94 	bl	80009c4 <readReg>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]
	return ((reg >> bit) & 0x01);
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	78bb      	ldrb	r3, [r7, #2]
 8000ca4:	fa42 f303 	asr.w	r3, r2, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <resetBit>:

void resetBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fe79 	bl	80009c4 <readReg>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1 << bit);		//zmieniono OR na AND
 8000cd6:	78bb      	ldrb	r3, [r7, #2]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fe90 	bl	8000a1a <writeReg>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <setBit>:

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	70fb      	strb	r3, [r7, #3]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	4619      	mov	r1, r3
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fe54 	bl	80009c4 <readReg>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << bit);
 8000d20:	78bb      	ldrb	r3, [r7, #2]
 8000d22:	2201      	movs	r2, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fe6d 	bl	8000a1a <writeReg>
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <nRF_Init>:


/* Main init function */
nrfStruct_t* nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
		GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
		GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	807b      	strh	r3, [r7, #2]
	/* Create main nRF structure	 */
	static nrfStruct_t nRFMainStruct;
	static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

	/* Init settigns struct */
	statusStrcut_Init(pnRFMainStruct);
 8000d56:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <nRF_Init+0x1b8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fcb6 	bl	80006cc <statusStrcut_Init>
	settingStruct_Init(pnRFMainStruct);
 8000d60:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <nRF_Init+0x1b8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fce6 	bl	8000736 <settingStruct_Init>
	addressStruct_Init(pnRFMainStruct);
 8000d6a:	4b65      	ldr	r3, [pc, #404]	; (8000f00 <nRF_Init+0x1b8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fd3e 	bl	80007f0 <addressStruct_Init>
	fifoStruct_Init(pnRFMainStruct);
 8000d74:	4b62      	ldr	r3, [pc, #392]	; (8000f00 <nRF_Init+0x1b8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fd80 	bl	800087e <fifoStruct_Init>
	hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 8000d7e:	4b60      	ldr	r3, [pc, #384]	; (8000f00 <nRF_Init+0x1b8>)
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	68f9      	ldr	r1, [r7, #12]
 8000d94:	f7ff fdae 	bl	80008f4 <hardware_Init>
			HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

//	pwrDown(pnRFMainStruct);
	/* Turn on modul */
	pwrUp(pnRFMainStruct);
 8000d98:	4b59      	ldr	r3, [pc, #356]	; (8000f00 <nRF_Init+0x1b8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff58 	bl	8000c52 <pwrUp>

	/* Set default settings */
	setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 8000da2:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <nRF_Init+0x1b8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffa9 	bl	8000d02 <setBit>
	writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 8000db0:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <nRF_Init+0x1b8>)
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <nRF_Init+0x1b8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	79db      	ldrb	r3, [r3, #7]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f7ff fe2c 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <nRF_Init+0x1b8>)
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <nRF_Init+0x1b8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	799b      	ldrb	r3, [r3, #6]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2102      	movs	r1, #2
 8000dd0:	f7ff fe23 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 8000dd4:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <nRF_Init+0x1b8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	2103      	movs	r1, #3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe1c 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <nRF_Init+0x1b8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2203      	movs	r2, #3
 8000de8:	2104      	movs	r1, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fe15 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <nRF_Init+0x1b8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2202      	movs	r2, #2
 8000df6:	2105      	movs	r1, #5
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe0e 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <nRF_Init+0x1b8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	220e      	movs	r2, #14
 8000e04:	2106      	movs	r1, #6
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe07 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <nRF_Init+0x1b8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	220e      	movs	r2, #14
 8000e12:	2107      	movs	r1, #7
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe00 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <nRF_Init+0x1b8>)
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <nRF_Init+0x1b8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	7a1b      	ldrb	r3, [r3, #8]
 8000e24:	461a      	mov	r2, r3
 8000e26:	211c      	movs	r1, #28
 8000e28:	f7ff fdf7 	bl	8000a1a <writeReg>

	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
 8000e30:	e00f      	b.n	8000e52 <nRF_Init+0x10a>
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <nRF_Init+0x1b8>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	3311      	adds	r3, #17
 8000e3a:	b2d9      	uxtb	r1, r3
				(pnRFMainStruct->setStruct.pipePayLen[i]));
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <nRF_Init+0x1b8>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	4413      	add	r3, r2
 8000e44:	7a5b      	ldrb	r3, [r3, #9]
 8000e46:	461a      	mov	r2, r3
 8000e48:	f7ff fde7 	bl	8000a1a <writeReg>
	for (i = 0; i < 6; i++) {
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d9ec      	bls.n	8000e32 <nRF_Init+0xea>
	}
	writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <nRF_Init+0x1b8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	211d      	movs	r1, #29
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fdda 	bl	8000a1a <writeReg>

	/* Set default address */
	writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <nRF_Init+0x1b8>)
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <nRF_Init+0x1b8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f103 0211 	add.w	r2, r3, #17
 8000e72:	2305      	movs	r3, #5
 8000e74:	2110      	movs	r1, #16
 8000e76:	f7ff fe26 	bl	8000ac6 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.txAddr));
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <nRF_Init+0x1b8>)
 8000e7c:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr0),
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <nRF_Init+0x1b8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f103 0216 	add.w	r2, r3, #22
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000e86:	2305      	movs	r3, #5
 8000e88:	210a      	movs	r1, #10
 8000e8a:	f7ff fe1c 	bl	8000ac6 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr0));
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <nRF_Init+0x1b8>)
 8000e90:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr1),
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <nRF_Init+0x1b8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f103 021b 	add.w	r2, r3, #27
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	210b      	movs	r1, #11
 8000e9e:	f7ff fe12 	bl	8000ac6 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr1));
	writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <nRF_Init+0x1b8>)
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <nRF_Init+0x1b8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	210c      	movs	r1, #12
 8000eb2:	f7ff fdb2 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <nRF_Init+0x1b8>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <nRF_Init+0x1b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	210d      	movs	r1, #13
 8000ec6:	f7ff fda8 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <nRF_Init+0x1b8>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <nRF_Init+0x1b8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	210e      	movs	r1, #14
 8000eda:	f7ff fd9e 	bl	8000a1a <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <nRF_Init+0x1b8>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <nRF_Init+0x1b8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000eea:	461a      	mov	r2, r3
 8000eec:	210f      	movs	r1, #15
 8000eee:	f7ff fd94 	bl	8000a1a <writeReg>

	return pnRFMainStruct;
 8000ef2:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <nRF_Init+0x1b8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t j;
	for (j = 0; j < BUF_SIZE; j++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e008      	b.n	8000f22 <main+0x1e>
		TransmitData[j] = 'A' + j;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	3241      	adds	r2, #65	; 0x41
 8000f16:	b2d1      	uxtb	r1, r2
 8000f18:	4a74      	ldr	r2, [pc, #464]	; (80010ec <main+0x1e8>)
 8000f1a:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j < BUF_SIZE; j++) {
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d9f3      	bls.n	8000f10 <main+0xc>
	}
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fe28 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f8f4 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f7ff fad2 	bl	80004d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f34:	f000 fd86 	bl	8001a44 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000f38:	f000 fc9a 	bl	8001870 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000f3c:	486c      	ldr	r0, [pc, #432]	; (80010f0 <main+0x1ec>)
 8000f3e:	f002 fab0 	bl	80034a2 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if  TEST_CONFIG
	/* 0. Create pointer and init structure. */
	nrfStruct_t *testStruct;						// create pointer to struct
	testStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin, CE_GPIO_Port,
 8000f42:	2310      	movs	r3, #16
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <main+0x1f0>)
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <main+0x1f4>)
 8000f4e:	4968      	ldr	r1, [pc, #416]	; (80010f0 <main+0x1ec>)
 8000f50:	486a      	ldr	r0, [pc, #424]	; (80010fc <main+0x1f8>)
 8000f52:	f7ff fef9 	bl	8000d48 <nRF_Init>
 8000f56:	6038      	str	r0, [r7, #0]
	CE_Pin);	// create struct
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000f58:	2100      	movs	r1, #0
 8000f5a:	6838      	ldr	r0, [r7, #0]
 8000f5c:	f7ff fd32 	bl	80009c4 <readReg>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b66      	ldr	r3, [pc, #408]	; (8001100 <main+0x1fc>)
 8000f66:	601a      	str	r2, [r3, #0]

	/* 1.1  Set role as RX */
	modeTX(testStruct);
 8000f68:	6838      	ldr	r0, [r7, #0]
 8000f6a:	f000 f97d 	bl	8001268 <modeTX>
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000f6e:	2100      	movs	r1, #0
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f7ff fd27 	bl	80009c4 <readReg>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b61      	ldr	r3, [pc, #388]	; (8001100 <main+0x1fc>)
 8000f7c:	601a      	str	r2, [r3, #0]
	/* 1.2 Enable CRC and set coding */
	enableCRC(testStruct);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f000 fa05 	bl	800138e <enableCRC>
	setCRC(testStruct, CRC_16_bits);
 8000f84:	2101      	movs	r1, #1
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f000 fa13 	bl	80013b2 <setCRC>
	/* 1.3 Enable/disable interrupts */
	enableRXinterrupt(testStruct);
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f000 f99e 	bl	80012ce <enableRXinterrupt>
	enableTXinterrupt(testStruct);
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f000 f9ad 	bl	80012f2 <enableTXinterrupt>
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6838      	ldr	r0, [r7, #0]
 8000f9c:	f7ff fd12 	bl	80009c4 <readReg>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b56      	ldr	r3, [pc, #344]	; (8001100 <main+0x1fc>)
 8000fa6:	601a      	str	r2, [r3, #0]
	/* 2. Set ACK for RX pipe  */
	enableAutoAckPipe(testStruct, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f000 fa34 	bl	8001418 <enableAutoAckPipe>
	regTmp = readReg(testStruct, EN_AA);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f7ff fd06 	bl	80009c4 <readReg>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <main+0x1fc>)
 8000fbe:	601a      	str	r2, [r3, #0]
	/* 3. Set RX pipe */
	enableRxAddr(testStruct, 0);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f000 fa4f 	bl	8001466 <enableRxAddr>
	regTmp = readReg(testStruct, EN_RXADDR);
 8000fc8:	2102      	movs	r1, #2
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f7ff fcfa 	bl	80009c4 <readReg>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	; (8001100 <main+0x1fc>)
 8000fd6:	601a      	str	r2, [r3, #0]
	/* 4. Set RX/TX address width */
	setAddrWidth(testStruct, longWidth);
 8000fd8:	2103      	movs	r1, #3
 8000fda:	6838      	ldr	r0, [r7, #0]
 8000fdc:	f000 fa6a 	bl	80014b4 <setAddrWidth>
	regTmp = readReg(testStruct, SETUP_AW);
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f7ff fcee 	bl	80009c4 <readReg>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b44      	ldr	r3, [pc, #272]	; (8001100 <main+0x1fc>)
 8000fee:	601a      	str	r2, [r3, #0]
	/* 5. Set ARD and ARC */
	setAutoRetrCount(testStruct, 4);
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f000 fa71 	bl	80014da <setAutoRetrCount>
	setAutoRetrDelay(testStruct, 3); //500us
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f000 fa94 	bl	8001528 <setAutoRetrDelay>
	regTmp = readReg(testStruct, SETUP_RETR);
 8001000:	2104      	movs	r1, #4
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f7ff fcde 	bl	80009c4 <readReg>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <main+0x1fc>)
 800100e:	601a      	str	r2, [r3, #0]
	/* 6. Set RF channel */
	setChannel(testStruct, 2);
 8001010:	2102      	movs	r1, #2
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f000 fab9 	bl	800158a <setChannel>
	regTmp = readReg(testStruct, RF_CH);
 8001018:	2105      	movs	r1, #5
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f7ff fcd2 	bl	80009c4 <readReg>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <main+0x1fc>)
 8001026:	601a      	str	r2, [r3, #0]
	/* 7. Set RF power and Data Rate */
	setRFpower(testStruct, RF_PWR_0dBm);
 8001028:	2103      	movs	r1, #3
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f000 fac6 	bl	80015bc <setRFpower>
	setDataRate(testStruct, RF_DataRate_250);
 8001030:	2104      	movs	r1, #4
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f000 fae7 	bl	8001606 <setDataRate>
	regTmp = readReg(testStruct, RF_SETUP);
 8001038:	2106      	movs	r1, #6
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f7ff fcc2 	bl	80009c4 <readReg>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <main+0x1fc>)
 8001046:	601a      	str	r2, [r3, #0]
	/* 8 Set RX address */
	setReceivePipeAddress(testStruct, 0, ReceiveAddress,
 8001048:	2305      	movs	r3, #5
 800104a:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <main+0x200>)
 800104c:	2100      	movs	r1, #0
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f000 fb20 	bl	8001694 <setReceivePipeAddress>
			sizeof(ReceiveAddress));
	readRegExt(testStruct, RX_ADDR_P0, ReceiveData, 5);
 8001054:	2305      	movs	r3, #5
 8001056:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <main+0x204>)
 8001058:	210a      	movs	r1, #10
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f7ff fd09 	bl	8000a72 <readRegExt>
	/* 9. Set TX address */
	setTransmitPipeAddress(testStruct, TransmitAddress,
 8001060:	2205      	movs	r2, #5
 8001062:	492a      	ldr	r1, [pc, #168]	; (800110c <main+0x208>)
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f000 fba9 	bl	80017bc <setTransmitPipeAddress>
			sizeof(TransmitAddress));
	readRegExt(testStruct, TX_ADDR, ReceiveData, 5);
 800106a:	2305      	movs	r3, #5
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <main+0x204>)
 800106e:	2110      	movs	r1, #16
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff fcfe 	bl	8000a72 <readRegExt>
#if TEST_STATIC_LENGTH
	setRxPayloadWidth(testStruct, 0, BUF_SIZE);
 8001076:	220a      	movs	r2, #10
 8001078:	2100      	movs	r1, #0
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f000 fbcb 	bl	8001816 <setRxPayloadWidth>
	regTmp = readReg(testStruct, RX_PW_P0);
 8001080:	2111      	movs	r1, #17
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff fc9e 	bl	80009c4 <readReg>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x1fc>)
 800108e:	601a      	str	r2, [r3, #0]
#endif
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <main+0x20c>)
 8001098:	f001 f862 	bl	8002160 <HAL_GPIO_WritePin>
		sendStatus = sendPayload(testStruct, TransmitData, BUF_SIZE);
 800109c:	220a      	movs	r2, #10
 800109e:	4913      	ldr	r1, [pc, #76]	; (80010ec <main+0x1e8>)
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f000 f8a9 	bl	80011f8 <sendPayload>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0x210>)
 80010ac:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b4:	4816      	ldr	r0, [pc, #88]	; (8001110 <main+0x20c>)
 80010b6:	f001 f853 	bl	8002160 <HAL_GPIO_WritePin>
		if (getStatusFullTxFIFO(testStruct)) {
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f000 fac8 	bl	8001650 <getStatusFullTxFIFO>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0e4      	beq.n	8001090 <main+0x18c>
			flushTx(testStruct);
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f7ff fd5d 	bl	8000b86 <flushTx>
			for (j = 0; j < BUF_SIZE; j++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	e008      	b.n	80010e4 <main+0x1e0>
				TransmitData[j] = 'A' + j;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	3241      	adds	r2, #65	; 0x41
 80010d8:	b2d1      	uxtb	r1, r2
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <main+0x1e8>)
 80010dc:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j < BUF_SIZE; j++) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d9f3      	bls.n	80010d2 <main+0x1ce>
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
 80010ea:	e7d1      	b.n	8001090 <main+0x18c>
 80010ec:	20000084 	.word	0x20000084
 80010f0:	200000f4 	.word	0x200000f4
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	2000009c 	.word	0x2000009c
 8001100:	20000080 	.word	0x20000080
 8001104:	2000000c 	.word	0x2000000c
 8001108:	20000090 	.word	0x20000090
 800110c:	20000004 	.word	0x20000004
 8001110:	40020c00 	.word	0x40020c00
 8001114:	2000007c 	.word	0x2000007c

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fc42 	bl	80039b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <SystemClock_Config+0xc8>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <SystemClock_Config+0xc8>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <SystemClock_Config+0xcc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <SystemClock_Config+0xcc>)
 8001162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <SystemClock_Config+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001188:	2308      	movs	r3, #8
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800118c:	2348      	movs	r3, #72	; 0x48
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fff9 	bl	8002194 <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011a8:	f000 f81e 	bl	80011e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	230f      	movs	r3, #15
 80011ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b0:	2302      	movs	r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2102      	movs	r1, #2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fa53 	bl	8002674 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011d4:	f000 f808 	bl	80011e8 <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	; 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <sendPayload>:
#include "settingModule.h"
#include "highLevelModule.h"

uint8_t sendPayload(nrfStruct_t *nrfStruct, uint8_t *buf, size_t bufSize) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	clearTX_DS(nrfStruct);
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f89a 	bl	800133e <clearTX_DS>
	clearMAX_RT(nrfStruct);
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 f8ab 	bl	8001366 <clearMAX_RT>
	writeTxPayload(nrfStruct, buf, bufSize);
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff fc83 	bl	8000b20 <writeTxPayload>
	if (!HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin)) {
 800121a:	2110      	movs	r1, #16
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <sendPayload+0x6c>)
 800121e:	f000 ff87 	bl	8002130 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <sendPayload+0x36>
		ceHigh(nrfStruct);
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff fbbb 	bl	80009a4 <ceHigh>
	}
	__HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0);		//set 0 for counter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) > RX_TX_SETTING_TIME + 10) {//check interrupt's flag
 8001238:	e009      	b.n	800124e <sendPayload+0x56>
		if (readBit(nrfStruct, STATUS, TX_DS)) //if timeout was exceed return 0
 800123a:	2205      	movs	r2, #5
 800123c:	2107      	movs	r1, #7
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fd1f 	bl	8000c82 <readBit>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <sendPayload+0x56>
				return OK_CODE;
 800124a:	2301      	movs	r3, #1
 800124c:	e006      	b.n	800125c <sendPayload+0x64>
	while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) > RX_TX_SETTING_TIME + 10) {//check interrupt's flag
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	2b8c      	cmp	r3, #140	; 0x8c
 8001258:	d8ef      	bhi.n	800123a <sendPayload+0x42>
	}
	return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020800 	.word	0x40020800

08001268 <modeTX>:

/**
 *@Brief	Switch radio module to Transmitter (PTX) mode
 */
void modeTX(nrfStruct_t *nrfStruct)
 {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	if (!readBit(nrfStruct, CONFIG, bit1)) {	//Check state of module
 8001270:	2201      	movs	r2, #1
 8001272:	2100      	movs	r1, #0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fd04 	bl	8000c82 <readBit>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <modeTX+0x28>
		pwrUp(nrfStruct);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fce6 	bl	8000c52 <pwrUp>
		delayUs(nrfStruct, 1500);	//wait 1.5ms fo nRF24L01+ stand up
 8001286:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fb51 	bl	8000932 <delayUs>
	}
	flushRx(nrfStruct);			//clear (flush) RX FIFO buffer
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fcab 	bl	8000bec <flushRx>
	flushTx(nrfStruct);		//clear (flush) TX FIFO buffer
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fc75 	bl	8000b86 <flushTx>

	clearRX_DR(nrfStruct);	//clear interrupts flags
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f83a 	bl	8001316 <clearRX_DR>
	clearTX_DS(nrfStruct);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f84b 	bl	800133e <clearTX_DS>
	clearMAX_RT(nrfStruct);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f85c 	bl	8001366 <clearMAX_RT>

	resetBit(nrfStruct, CONFIG, bit0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fd00 	bl	8000cb8 <resetBit>
	ceHigh(nrfStruct);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fb73 	bl	80009a4 <ceHigh>
	delayUs(nrfStruct, RX_TX_SETTING_TIME);
 80012be:	2182      	movs	r1, #130	; 0x82
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fb36 	bl	8000932 <delayUs>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <enableRXinterrupt>:
	resetBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 0;
}

void enableRXinterrupt(nrfStruct_t *nrfStruct)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit6);
 80012d6:	2206      	movs	r2, #6
 80012d8:	2100      	movs	r1, #0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd11 	bl	8000d02 <setBit>
	nrfStruct->setStruct.enableRxIrq = 1;
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	7bd3      	ldrb	r3, [r2, #15]
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	73d3      	strb	r3, [r2, #15]
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <enableTXinterrupt>:
void enableTXinterrupt(nrfStruct_t *nrfStruct)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit5);
 80012fa:	2205      	movs	r2, #5
 80012fc:	2100      	movs	r1, #0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fcff 	bl	8000d02 <setBit>
	nrfStruct->setStruct.enableTxIrq = 1;
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	7bd3      	ldrb	r3, [r2, #15]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	73d3      	strb	r3, [r2, #15]
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <clearRX_DR>:
	setBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 1;
}

void clearRX_DR(nrfStruct_t *nrfStruct)
{ //clear irt bits in Status Register
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit6);
 800131e:	2206      	movs	r2, #6
 8001320:	2107      	movs	r1, #7
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fced 	bl	8000d02 <setBit>
	nrfStruct->statusStruct.dataReadIrq = 0;
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800132e:	f36f 0300 	bfc	r3, #0, #1
 8001332:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <clearTX_DS>:
void clearTX_DS(nrfStruct_t *nrfStruct)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit5);
 8001346:	2205      	movs	r2, #5
 8001348:	2107      	movs	r1, #7
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fcd9 	bl	8000d02 <setBit>
	nrfStruct->statusStruct.dataSendIrq = 0;
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001356:	f36f 0341 	bfc	r3, #1, #1
 800135a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <clearMAX_RT>:
void clearMAX_RT(nrfStruct_t *nrfStruct)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit4);
 800136e:	2204      	movs	r2, #4
 8001370:	2107      	movs	r1, #7
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fcc5 	bl	8000d02 <setBit>
	nrfStruct->statusStruct.maxRetr = 0;
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800137e:	f36f 0382 	bfc	r3, #2, #1
 8001382:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <enableCRC>:

/* CRC functions */
void enableCRC(nrfStruct_t *nrfStruct)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit3);
 8001396:	2203      	movs	r2, #3
 8001398:	2100      	movs	r1, #0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fcb1 	bl	8000d02 <setBit>
	nrfStruct->setStruct.enableCRC = 1;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	7bd3      	ldrb	r3, [r2, #15]
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	73d3      	strb	r3, [r2, #15]
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <setCRC>:
	resetBit(nrfStruct, CONFIG, bit3);
	nrfStruct->setStruct.enableCRC = 0;
}

void setCRC(nrfStruct_t *nrfStruct, widthCRC_t w)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	if (w)
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00a      	beq.n	80013da <setCRC+0x28>
	{
		setBit(nrfStruct, CONFIG, bit2);
 80013c4:	2202      	movs	r2, #2
 80013c6:	2100      	movs	r1, #0
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fc9a 	bl	8000d02 <setBit>
		nrfStruct->setStruct.codingCRC = 1;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7bd3      	ldrb	r3, [r2, #15]
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	73d3      	strb	r3, [r2, #15]
	else
	{
		resetBit(nrfStruct, CONFIG, bit2);
		nrfStruct->setStruct.codingCRC = 0;
	}
}
 80013d8:	e009      	b.n	80013ee <setCRC+0x3c>
		resetBit(nrfStruct, CONFIG, bit2);
 80013da:	2202      	movs	r2, #2
 80013dc:	2100      	movs	r1, #0
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fc6a 	bl	8000cb8 <resetBit>
		nrfStruct->setStruct.codingCRC = 0;
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	7bd3      	ldrb	r3, [r2, #15]
 80013e8:	f36f 0341 	bfc	r3, #1, #1
 80013ec:	73d3      	strb	r3, [r2, #15]
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <checkPipe>:

/* Auto ACK */
uint8_t checkPipe(uint8_t pipe)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
	if (pipe >= 0 && pipe <= 5) //check correct pipe number
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d801      	bhi.n	800140a <checkPipe+0x14>
		return 1;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <checkPipe+0x16>
	return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <enableAutoAckPipe>:
uint8_t enableAutoAckPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffe5 	bl	80013f6 <checkPipe>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d014      	beq.n	800145c <enableAutoAckPipe+0x44>
	{
		setBit(nrfStruct, EN_AA, pipe);
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	461a      	mov	r2, r3
 8001436:	2101      	movs	r1, #1
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fc62 	bl	8000d02 <setBit>
		nrfStruct->setStruct.pipeACK |= (1 << pipe);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	79db      	ldrb	r3, [r3, #7]
 8001442:	b25a      	sxtb	r2, r3
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b25b      	sxtb	r3, r3
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	71da      	strb	r2, [r3, #7]
		return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <enableAutoAckPipe+0x46>
	}
	return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <enableRxAddr>:
	return 0;
}

/* RX addresses */
uint8_t enableRxAddr(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ffbe 	bl	80013f6 <checkPipe>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d014      	beq.n	80014aa <enableRxAddr+0x44>
	{
		setBit(nrfStruct, EN_RXADDR, pipe);
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	461a      	mov	r2, r3
 8001484:	2102      	movs	r1, #2
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fc3b 	bl	8000d02 <setBit>
		nrfStruct->setStruct.pipeEn |= (1 << pipe);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	799b      	ldrb	r3, [r3, #6]
 8001490:	b25a      	sxtb	r2, r3
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	719a      	strb	r2, [r3, #6]
		return 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <enableRxAddr+0x46>
	}
	return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <setAddrWidth>:
	return 0;
}

/* Address Width */
void setAddrWidth(nrfStruct_t *nrfStruct, addressWidth_t width)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
	writeReg(nrfStruct, SETUP_AW, width);
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	461a      	mov	r2, r3
 80014c4:	2103      	movs	r1, #3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff faa7 	bl	8000a1a <writeReg>
	nrfStruct->addrStruct.addrWidth = width;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	741a      	strb	r2, [r3, #16]
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <setAutoRetrCount>:

/* Setup retransmission */
uint8_t setAutoRetrCount(nrfStruct_t *nrfStruct, uint8_t count)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
	if (count >= 0x00 && count <= 0x0F)
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d818      	bhi.n	800151e <setAutoRetrCount+0x44>
	{					//check count val
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR); 	//read reg. val
 80014ec:	2104      	movs	r1, #4
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fa68 	bl	80009c4 <readReg>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0xF0;							// reset LSB and save MSB
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f023 030f 	bic.w	r3, r3, #15
 80014fe:	73fb      	strb	r3, [r7, #15]
		tmp |= count;									//add tmp and count
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	4313      	orrs	r3, r2
 8001506:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);			//write to SETUP_RETR
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	461a      	mov	r2, r3
 800150c:	2104      	movs	r1, #4
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fa83 	bl	8000a1a <writeReg>
		nrfStruct->setStruct.arc = count;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	715a      	strb	r2, [r3, #5]
		return OK_CODE;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <setAutoRetrCount+0x46>
	}
	return ERR_CODE;
 800151e:	23ff      	movs	r3, #255	; 0xff
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <setAutoRetrDelay>:

uint8_t setAutoRetrDelay(nrfStruct_t *nrfStruct, uint8_t delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
	if (delay > 0x0F)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d902      	bls.n	8001540 <setAutoRetrDelay+0x18>
	{						//if delay in MSB format
		delay = delay >> 4; //shift to LSB format
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	70fb      	strb	r3, [r7, #3]
	}
	if (delay >= 0x00 && delay <= 0x0F)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d81c      	bhi.n	8001580 <setAutoRetrDelay+0x58>
	{
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR);
 8001546:	2104      	movs	r1, #4
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fa3b 	bl	80009c4 <readReg>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0x0F;	//save LSB, reset MSB
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	73fb      	strb	r3, [r7, #15]
		tmp |= (delay << 4); //add tmp and delay
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	461a      	mov	r2, r3
 800156e:	2104      	movs	r1, #4
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fa52 	bl	8000a1a <writeReg>
		nrfStruct->setStruct.ard = delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	711a      	strb	r2, [r3, #4]
		return OK_CODE;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <setAutoRetrDelay+0x5a>
	}
	return ERR_CODE;
 8001580:	23ff      	movs	r3, #255	; 0xff
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <setChannel>:

/* RF channel */
uint8_t setChannel(nrfStruct_t *nrfStruct, uint8_t channel)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
	if (channel >= 0 && channel <= 125)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b7d      	cmp	r3, #125	; 0x7d
 800159a:	d80a      	bhi.n	80015b2 <setChannel+0x28>
	{
		writeReg(nrfStruct, RF_CH, channel); //Maximum channel limited to 125 by hardware
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	461a      	mov	r2, r3
 80015a0:	2105      	movs	r1, #5
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fa39 	bl	8000a1a <writeReg>
		nrfStruct->setStruct.channel = channel;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	705a      	strb	r2, [r3, #1]
		return OK_CODE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <setChannel+0x2a>
	}
	return ERR_CODE;
 80015b2:	23ff      	movs	r3, #255	; 0xff
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <setRFpower>:
		return 0;
}


void setRFpower(nrfStruct_t *nrfStruct, powerRF_t power)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	/*
	if (power > RF_PWR_0dBm && power < RF_PWR_18dBm)
	 return ERR_CODE;*/
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); //
 80015c8:	2106      	movs	r1, #6
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff f9fa 	bl	80009c4 <readReg>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0xF8;					  //0xF8 - 1111 1000B reset 3 LSB
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (power << 1);			  //combining tmp and shifted power
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	461a      	mov	r2, r3
 80015f0:	2106      	movs	r1, #6
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fa11 	bl	8000a1a <writeReg>
	nrfStruct->setStruct.powerRF = power;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	70da      	strb	r2, [r3, #3]

}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <setDataRate>:

void setDataRate(nrfStruct_t *nrfStruct, dataRate_t rate)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); 	//
 8001612:	2106      	movs	r1, #6
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f9d5 	bl	80009c4 <readReg>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0x06;//0x06 = 0000 0110B - reset data rate's bits - Also this line reset PLL_LOCK and CONT_WAVE bits
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	f003 0306 	and.w	r3, r3, #6
 8001624:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (rate << 3);			  //combining tmp and shifted data rate
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	b25a      	sxtb	r2, r3
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001630:	4313      	orrs	r3, r2
 8001632:	b25b      	sxtb	r3, r3
 8001634:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	461a      	mov	r2, r3
 800163a:	2106      	movs	r1, #6
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f9ec 	bl	8000a1a <writeReg>
	nrfStruct->setStruct.dataRate = rate;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	709a      	strb	r2, [r3, #2]
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <getStatusFullTxFIFO>:

/* Status */
uint8_t getStatusFullTxFIFO(nrfStruct_t *nrfStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if (readBit(nrfStruct, STATUS, bit0)) {
 8001658:	2200      	movs	r2, #0
 800165a:	2107      	movs	r1, #7
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fb10 	bl	8000c82 <readBit>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <getStatusFullTxFIFO+0x2a>
		nrfStruct->statusStruct.txFull = 1;
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800166e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001672:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
		return 1; //TX FIFO full
 8001676:	2301      	movs	r3, #1
 8001678:	e007      	b.n	800168a <getStatusFullTxFIFO+0x3a>
	}
	nrfStruct->statusStruct.txFull = 0;
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001680:	f36f 1386 	bfc	r3, #6, #1
 8001684:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	return 0;	 //Available locations in TX FIFO
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <setReceivePipeAddress>:
 * @Note	Remember that addresses registers for pipes from 2 to 5 are 1 byte only.
 * 			Also registers for pipe 0 and 1 can have size of from 3 to 5 bytes.
 */
uint8_t setReceivePipeAddress(nrfStruct_t *nrfStruct, uint8_t pipe,
		uint8_t *addrBuf, size_t addrBufSize)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	460b      	mov	r3, r1
 80016a2:	72fb      	strb	r3, [r7, #11]
	if (!checkPipe(pipe)) { //if checkPipe return 0 - end fun. by return 0.
 80016a4:	7afb      	ldrb	r3, [r7, #11]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fea5 	bl	80013f6 <checkPipe>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <setReceivePipeAddress+0x22>
		return ERR_CODE;
 80016b2:	23ff      	movs	r3, #255	; 0xff
 80016b4:	e07e      	b.n	80017b4 <setReceivePipeAddress+0x120>
	}
	size_t bufSize = 0x05;
 80016b6:	2305      	movs	r3, #5
 80016b8:	617b      	str	r3, [r7, #20]
	if (pipe == 0 || pipe == 1) {	//if pipe 0 or 1 check bufer width
 80016ba:	7afb      	ldrb	r3, [r7, #11]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <setReceivePipeAddress+0x32>
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d13e      	bne.n	8001744 <setReceivePipeAddress+0xb0>
		switch (addrBufSize) {	//check addrBufSize
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d006      	beq.n	80016da <setReceivePipeAddress+0x46>
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d007      	beq.n	80016e0 <setReceivePipeAddress+0x4c>
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d108      	bne.n	80016e6 <setReceivePipeAddress+0x52>
		case 3:
			bufSize = 0x03;
 80016d4:	2303      	movs	r3, #3
 80016d6:	617b      	str	r3, [r7, #20]
			break;
 80016d8:	e007      	b.n	80016ea <setReceivePipeAddress+0x56>
		case 4:
			bufSize = 0x04;
 80016da:	2304      	movs	r3, #4
 80016dc:	617b      	str	r3, [r7, #20]
			break;
 80016de:	e004      	b.n	80016ea <setReceivePipeAddress+0x56>
		case 5:
			bufSize = 0x05;
 80016e0:	2305      	movs	r3, #5
 80016e2:	617b      	str	r3, [r7, #20]
			break;
 80016e4:	e001      	b.n	80016ea <setReceivePipeAddress+0x56>
		default:
			return ERR_CODE;
 80016e6:	23ff      	movs	r3, #255	; 0xff
 80016e8:	e064      	b.n	80017b4 <setReceivePipeAddress+0x120>
			break;
		}
		if (pipe == 0) {	//check pipe and write addr to struct
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d112      	bne.n	8001716 <setReceivePipeAddress+0x82>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	74fb      	strb	r3, [r7, #19]
 80016f4:	e00b      	b.n	800170e <setReceivePipeAddress+0x7a>
				nrfStruct->addrStruct.rxAddr0[i] = addrBuf[i];
 80016f6:	7cfb      	ldrb	r3, [r7, #19]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	441a      	add	r2, r3
 80016fc:	7cfb      	ldrb	r3, [r7, #19]
 80016fe:	7811      	ldrb	r1, [r2, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	759a      	strb	r2, [r3, #22]
			for (i = 0; i < addrBufSize; i++) {
 8001708:	7cfb      	ldrb	r3, [r7, #19]
 800170a:	3301      	adds	r3, #1
 800170c:	74fb      	strb	r3, [r7, #19]
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d8ef      	bhi.n	80016f6 <setReceivePipeAddress+0x62>
			}
		}
		if (pipe == 1) {
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d141      	bne.n	80017a0 <setReceivePipeAddress+0x10c>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	74bb      	strb	r3, [r7, #18]
 8001720:	e00b      	b.n	800173a <setReceivePipeAddress+0xa6>
				nrfStruct->addrStruct.rxAddr1[i] = addrBuf[i];
 8001722:	7cbb      	ldrb	r3, [r7, #18]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	441a      	add	r2, r3
 8001728:	7cbb      	ldrb	r3, [r7, #18]
 800172a:	7811      	ldrb	r1, [r2, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	460a      	mov	r2, r1
 8001732:	76da      	strb	r2, [r3, #27]
			for (i = 0; i < addrBufSize; i++) {
 8001734:	7cbb      	ldrb	r3, [r7, #18]
 8001736:	3301      	adds	r3, #1
 8001738:	74bb      	strb	r3, [r7, #18]
 800173a:	7cbb      	ldrb	r3, [r7, #18]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d8ef      	bhi.n	8001722 <setReceivePipeAddress+0x8e>
		if (pipe == 1) {
 8001742:	e02d      	b.n	80017a0 <setReceivePipeAddress+0x10c>
			}
		}
	} else {
		if (addrBufSize == 1)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <setReceivePipeAddress+0xba>
			bufSize = 0x01;
 800174a:	2301      	movs	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
		switch (pipe) {	//check pipe and write addr to struct
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	3b02      	subs	r3, #2
 8001752:	2b03      	cmp	r3, #3
 8001754:	d822      	bhi.n	800179c <setReceivePipeAddress+0x108>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <setReceivePipeAddress+0xc8>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	08001779 	.word	0x08001779
 8001764:	08001785 	.word	0x08001785
 8001768:	08001791 	.word	0x08001791
		case 2:
			nrfStruct->addrStruct.rxAddr2 = *addrBuf;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 8001776:	e013      	b.n	80017a0 <setReceivePipeAddress+0x10c>
		case 3:
			nrfStruct->addrStruct.rxAddr3 = *addrBuf;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8001782:	e00d      	b.n	80017a0 <setReceivePipeAddress+0x10c>
		case 4:
			nrfStruct->addrStruct.rxAddr4 = *addrBuf;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 800178e:	e007      	b.n	80017a0 <setReceivePipeAddress+0x10c>
		case 5:
			nrfStruct->addrStruct.rxAddr5 = *addrBuf;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			break;
 800179a:	e001      	b.n	80017a0 <setReceivePipeAddress+0x10c>
		default:
			return ERR_CODE;
 800179c:	23ff      	movs	r3, #255	; 0xff
 800179e:	e009      	b.n	80017b4 <setReceivePipeAddress+0x120>
			break;
		}
	}
	uint8_t addr = RX_ADDR_P0 + pipe; //if pipe = 0 -> write Receive address pipe 0
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	330a      	adds	r3, #10
 80017a4:	747b      	strb	r3, [r7, #17]
	writeRegExt(nrfStruct, addr, addrBuf, bufSize);
 80017a6:	7c79      	ldrb	r1, [r7, #17]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff f98a 	bl	8000ac6 <writeRegExt>

	return OK_CODE;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <setTransmitPipeAddress>:

/* Transmit address data pipe */
uint8_t setTransmitPipeAddress(nrfStruct_t *nrfStruct, uint8_t *addrBuf,
		size_t addrBufSize)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	if (((nrfStruct->addrStruct.addrWidth) + 2) != addrBufSize) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	7c1b      	ldrb	r3, [r3, #16]
 80017cc:	3302      	adds	r3, #2
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d001      	beq.n	80017da <setTransmitPipeAddress+0x1e>
		return ERR_CODE;
 80017d6:	23ff      	movs	r3, #255	; 0xff
 80017d8:	e019      	b.n	800180e <setTransmitPipeAddress+0x52>
	}

	uint8_t i;
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	e00b      	b.n	80017f8 <setTransmitPipeAddress+0x3c>
		nrfStruct->addrStruct.txAddr[i] = addrBuf[i];
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	441a      	add	r2, r3
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	7811      	ldrb	r1, [r2, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	460a      	mov	r2, r1
 80017f0:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	3301      	adds	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8ef      	bhi.n	80017e0 <setTransmitPipeAddress+0x24>
	}
	writeRegExt(nrfStruct, TX_ADDR, addrBuf, addrBufSize);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	2110      	movs	r1, #16
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff f95d 	bl	8000ac6 <writeRegExt>
	return OK_CODE;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <setRxPayloadWidth>:
	}
	return ERR_CODE;
}

uint8_t setRxPayloadWidth(nrfStruct_t *nrfStruct, uint8_t pipe, uint8_t width)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	70fb      	strb	r3, [r7, #3]
 8001822:	4613      	mov	r3, r2
 8001824:	70bb      	strb	r3, [r7, #2]
	if (checkPipe(pipe))
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fde4 	bl	80013f6 <checkPipe>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d017      	beq.n	8001864 <setRxPayloadWidth+0x4e>
	{
		if (width < 1 && width > 32) { //check width correct value
 8001834:	78bb      	ldrb	r3, [r7, #2]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d104      	bne.n	8001844 <setRxPayloadWidth+0x2e>
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	2b20      	cmp	r3, #32
 800183e:	d901      	bls.n	8001844 <setRxPayloadWidth+0x2e>
			return ERR_CODE;
 8001840:	23ff      	movs	r3, #255	; 0xff
 8001842:	e010      	b.n	8001866 <setRxPayloadWidth+0x50>
		}
		uint8_t addr = RX_PW_P0 + pipe;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	3311      	adds	r3, #17
 8001848:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, addr, width);
 800184a:	78ba      	ldrb	r2, [r7, #2]
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff f8e2 	bl	8000a1a <writeReg>
		nrfStruct->setStruct.pipePayLen[pipe] = width;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	78ba      	ldrb	r2, [r7, #2]
 800185e:	725a      	strb	r2, [r3, #9]
		return OK_CODE;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <setRxPayloadWidth+0x50>
	}
	return ERR_CODE;
 8001864:	23ff      	movs	r3, #255	; 0xff
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_SPI1_Init+0x64>)
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <MX_SPI1_Init+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_SPI1_Init+0x64>)
 800187c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_SPI1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_SPI1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_SPI1_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_SPI1_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_SPI1_Init+0x64>)
 80018a4:	2218      	movs	r2, #24
 80018a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_SPI1_Init+0x64>)
 80018bc:	220a      	movs	r2, #10
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_SPI1_Init+0x64>)
 80018c2:	f001 f86f 	bl	80029a4 <HAL_SPI_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018cc:	f7ff fc8c 	bl	80011e8 <Error_Handler>
  }

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000009c 	.word	0x2000009c
 80018d8:	40013000 	.word	0x40013000

080018dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_SPI_MspInit+0x84>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12b      	bne.n	8001956 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_SPI_MspInit+0x88>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_SPI_MspInit+0x88>)
 8001908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_SPI_MspInit+0x88>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_SPI_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_SPI_MspInit+0x88>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_SPI_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001936:	23e0      	movs	r3, #224	; 0xe0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001946:	2305      	movs	r3, #5
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 8001952:	f000 fa6b 	bl	8001e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40013000 	.word	0x40013000
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_MspInit+0x4c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_MspInit+0x4c>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001980:	6453      	str	r3, [r2, #68]	; 0x44
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_MspInit+0x4c>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a10:	f000 f906 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <SystemInit+0x28>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <SystemInit+0x28>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SystemInit+0x28>)
 8001a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a32:	609a      	str	r2, [r3, #8]
#endif
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a68:	2247      	movs	r2, #71	; 0x47
 8001a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a8c:	4813      	ldr	r0, [pc, #76]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a8e:	f001 fcdd 	bl	800344c <HAL_TIM_Base_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a98:	f7ff fba6 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_TIM1_Init+0x98>)
 8001aaa:	f001 fd1e 	bl	80034ea <HAL_TIM_ConfigClockSource>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ab4:	f7ff fb98 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_TIM1_Init+0x98>)
 8001ac6:	f001 fee1 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ad0:	f7ff fb8a 	bl	80011e8 <Error_Handler>
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000f4 	.word	0x200000f4
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40023800 	.word	0x40023800

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b2e:	e003      	b.n	8001b38 <LoopCopyDataInit>

08001b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b36:	3104      	adds	r1, #4

08001b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b40:	d3f6      	bcc.n	8001b30 <CopyDataInit>
  ldr  r2, =_sbss
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b44:	e002      	b.n	8001b4c <LoopFillZerobss>

08001b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b48:	f842 3b04 	str.w	r3, [r2], #4

08001b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b50:	d3f9      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b52:	f7ff ff61 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b56:	f001 ff07 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7ff f9d3 	bl	8000f04 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b64:	080039f8 	.word	0x080039f8
  ldr  r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b6c:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001b70:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001b74:	20000138 	.word	0x20000138

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f90d 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fedc 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f917 	bl	8001e12 <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f8ed 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000014 	.word	0x20000014
 8001c18:	2000001c 	.word	0x2000001c
 8001c1c:	20000018 	.word	0x20000018

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000001c 	.word	0x2000001c
 8001c44:	20000134 	.word	0x20000134

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000134 	.word	0x20000134

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff47 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff5c 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffb0 	bl	8001d80 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e159      	b.n	80020fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8148 	bne.w	80020f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d00b      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7a:	2b11      	cmp	r3, #17
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0xfc>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a2 	beq.w	80020f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a51      	ldr	r2, [pc, #324]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2ec>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x202>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_GPIO_Init+0x2f0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x1fe>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a46      	ldr	r2, [pc, #280]	; (8002120 <HAL_GPIO_Init+0x2f4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x1fa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a45      	ldr	r2, [pc, #276]	; (8002124 <HAL_GPIO_Init+0x2f8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x1f6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a44      	ldr	r2, [pc, #272]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x1f2>
 800201a:	2304      	movs	r3, #4
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800201e:	2307      	movs	r3, #7
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4934      	ldr	r1, [pc, #208]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_GPIO_Init+0x300>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002072:	4a2e      	ldr	r2, [pc, #184]	; (800212c <HAL_GPIO_Init+0x300>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_GPIO_Init+0x300>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_GPIO_Init+0x300>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_GPIO_Init+0x300>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c6:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_GPIO_Init+0x300>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_GPIO_Init+0x300>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_GPIO_Init+0x300>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f aea2 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e001      	b.n	8002152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e25b      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b2:	4ba3      	ldr	r3, [pc, #652]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d00c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4ba0      	ldr	r3, [pc, #640]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d112      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b9d      	ldr	r3, [pc, #628]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	4b99      	ldr	r3, [pc, #612]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05b      	beq.n	800229c <HAL_RCC_OscConfig+0x108>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d157      	bne.n	800229c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e236      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x74>
 80021fa:	4b91      	ldr	r3, [pc, #580]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a90      	ldr	r2, [pc, #576]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x98>
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8a      	ldr	r2, [pc, #552]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a87      	ldr	r2, [pc, #540]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 800222c:	4b84      	ldr	r3, [pc, #528]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a80      	ldr	r2, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcfc 	bl	8001c48 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fcf8 	bl	8001c48 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1fb      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xc0>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fce8 	bl	8001c48 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fce4 	bl	8001c48 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1e7      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0xe8>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022aa:	4b65      	ldr	r3, [pc, #404]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b62      	ldr	r3, [pc, #392]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1bb      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4952      	ldr	r1, [pc, #328]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_OscConfig+0x2b0>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7ff fc9d 	bl	8001c48 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff fc99 	bl	8001c48 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e19c      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4940      	ldr	r1, [pc, #256]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x2b0>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fc7c 	bl	8001c48 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff fc78 	bl	8001c48 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e17b      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d030      	beq.n	80023e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x2b4>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fc5c 	bl	8001c48 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fc58 	bl	8001c48 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e15b      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x200>
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_OscConfig+0x2b4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fc45 	bl	8001c48 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff fc41 	bl	8001c48 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e144      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a0 	beq.w	800252e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x2b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d121      	bne.n	800246e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCC_OscConfig+0x2b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_OscConfig+0x2b8>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7ff fc07 	bl	8001c48 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e011      	b.n	8002462 <HAL_RCC_OscConfig+0x2ce>
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
 800244c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7ff fbfa 	bl	8001c48 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e0fd      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCC_OscConfig+0x4d4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x2f0>
 8002476:	4b7d      	ldr	r3, [pc, #500]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a7c      	ldr	r2, [pc, #496]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	e01c      	b.n	80024be <HAL_RCC_OscConfig+0x32a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x312>
 800248c:	4b77      	ldr	r3, [pc, #476]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a76      	ldr	r2, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	4b74      	ldr	r3, [pc, #464]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a73      	ldr	r2, [pc, #460]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x32a>
 80024a6:	4b71      	ldr	r3, [pc, #452]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a70      	ldr	r2, [pc, #448]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	4b6e      	ldr	r3, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a6d      	ldr	r2, [pc, #436]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7ff fbbf 	bl	8001c48 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7ff fbbb 	bl	8001c48 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0bc      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	4b61      	ldr	r3, [pc, #388]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ee      	beq.n	80024ce <HAL_RCC_OscConfig+0x33a>
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fba9 	bl	8001c48 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff fba5 	bl	8001c48 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0a6      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a51      	ldr	r2, [pc, #324]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8092 	beq.w	800265c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002538:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d05c      	beq.n	80025fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d141      	bne.n	80025d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_RCC_OscConfig+0x4dc>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fb79 	bl	8001c48 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff fb75 	bl	8001c48 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e078      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	4933      	ldr	r1, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a2:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCC_OscConfig+0x4dc>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fb4e 	bl	8001c48 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff fb4a 	bl	8001c48 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04d      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x41c>
 80025ce:	e045      	b.n	800265c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fb37 	bl	8001c48 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff fb33 	bl	8001c48 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e036      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x44a>
 80025fc:	e02e      	b.n	800265c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e029      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_RCC_OscConfig+0x4d8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	429a      	cmp	r2, r3
 800261c:	d11c      	bne.n	8002658 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d115      	bne.n	8002658 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d10d      	bne.n	8002658 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d106      	bne.n	8002658 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40007000 	.word	0x40007000
 800266c:	40023800 	.word	0x40023800
 8002670:	42470060 	.word	0x42470060

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0cc      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d90c      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d044      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e067      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7ff fa70 	bl	8001c48 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7ff fa6c 	bl	8001c48 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e04f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d20c      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4601      	mov	r1, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	fa21 f303 	lsr.w	r3, r1, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f9d0 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	080039d8 	.word	0x080039d8
 8002838:	20000014 	.word	0x20000014
 800283c:	20000018 	.word	0x20000018

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_GetSysClockFreq+0x158>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d007      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x32>
 8002862:	2b08      	cmp	r3, #8
 8002864:	d008      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x38>
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 808d 	bne.w	8002986 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCC_GetSysClockFreq+0x15c>)
 800286e:	60bb      	str	r3, [r7, #8]
       break;
 8002870:	e08c      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002874:	60bb      	str	r3, [r7, #8]
      break;
 8002876:	e089      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002878:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_GetSysClockFreq+0x158>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002880:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_RCC_GetSysClockFreq+0x158>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d023      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_GetSysClockFreq+0x158>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	f04f 0400 	mov.w	r4, #0
 8002898:	f240 11ff 	movw	r1, #511	; 0x1ff
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	ea03 0501 	and.w	r5, r3, r1
 80028a4:	ea04 0602 	and.w	r6, r4, r2
 80028a8:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028aa:	fb02 f106 	mul.w	r1, r2, r6
 80028ae:	2200      	movs	r2, #0
 80028b0:	fb02 f205 	mul.w	r2, r2, r5
 80028b4:	440a      	add	r2, r1
 80028b6:	493a      	ldr	r1, [pc, #232]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028b8:	fba5 0101 	umull	r0, r1, r5, r1
 80028bc:	1853      	adds	r3, r2, r1
 80028be:	4619      	mov	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f04f 0400 	mov.w	r4, #0
 80028c6:	461a      	mov	r2, r3
 80028c8:	4623      	mov	r3, r4
 80028ca:	f7fd fc85 	bl	80001d8 <__aeabi_uldivmod>
 80028ce:	4603      	mov	r3, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e049      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d6:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_RCC_GetSysClockFreq+0x158>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	f04f 0400 	mov.w	r4, #0
 80028e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	ea03 0501 	and.w	r5, r3, r1
 80028ec:	ea04 0602 	and.w	r6, r4, r2
 80028f0:	4629      	mov	r1, r5
 80028f2:	4632      	mov	r2, r6
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	0154      	lsls	r4, r2, #5
 80028fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002902:	014b      	lsls	r3, r1, #5
 8002904:	4619      	mov	r1, r3
 8002906:	4622      	mov	r2, r4
 8002908:	1b49      	subs	r1, r1, r5
 800290a:	eb62 0206 	sbc.w	r2, r2, r6
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0194      	lsls	r4, r2, #6
 8002918:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800291c:	018b      	lsls	r3, r1, #6
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	eb64 0402 	sbc.w	r4, r4, r2
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	00e2      	lsls	r2, r4, #3
 800292e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002932:	00d9      	lsls	r1, r3, #3
 8002934:	460b      	mov	r3, r1
 8002936:	4614      	mov	r4, r2
 8002938:	195b      	adds	r3, r3, r5
 800293a:	eb44 0406 	adc.w	r4, r4, r6
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	02a2      	lsls	r2, r4, #10
 8002948:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800294c:	0299      	lsls	r1, r3, #10
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	4618      	mov	r0, r3
 8002954:	4621      	mov	r1, r4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	461a      	mov	r2, r3
 800295e:	4623      	mov	r3, r4
 8002960:	f7fd fc3a 	bl	80001d8 <__aeabi_uldivmod>
 8002964:	4603      	mov	r3, r0
 8002966:	460c      	mov	r4, r1
 8002968:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_GetSysClockFreq+0x158>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	3301      	adds	r3, #1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	60bb      	str	r3, [r7, #8]
      break;
 8002984:	e002      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002988:	60bb      	str	r3, [r7, #8]
      break;
 800298a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298c:	68bb      	ldr	r3, [r7, #8]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	017d7840 	.word	0x017d7840

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e056      	b.n	8002a64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe ff83 	bl	80018dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	ea42 0103 	orr.w	r1, r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	f003 0104 	and.w	r1, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_SPI_Transmit+0x22>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e11e      	b.n	8002ccc <HAL_SPI_Transmit+0x260>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a96:	f7ff f8d7 	bl	8001c48 <HAL_GetTick>
 8002a9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
 8002aae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab0:	e103      	b.n	8002cba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_Transmit+0x52>
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac2:	e0fa      	b.n	8002cba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0a:	d107      	bne.n	8002b1c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d007      	beq.n	8002b3a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b42:	d14b      	bne.n	8002bdc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Transmit+0xe6>
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d13e      	bne.n	8002bd0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b76:	e02b      	b.n	8002bd0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d112      	bne.n	8002bac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002baa:	e011      	b.n	8002bd0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bac:	f7ff f84c 	bl	8001c48 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d803      	bhi.n	8002bc4 <HAL_SPI_Transmit+0x158>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d102      	bne.n	8002bca <HAL_SPI_Transmit+0x15e>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bce:	e074      	b.n	8002cba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ce      	bne.n	8002b78 <HAL_SPI_Transmit+0x10c>
 8002bda:	e04c      	b.n	8002c76 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Transmit+0x17e>
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d140      	bne.n	8002c6c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c10:	e02c      	b.n	8002c6c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d113      	bne.n	8002c48 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c46:	e011      	b.n	8002c6c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c48:	f7fe fffe 	bl	8001c48 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d803      	bhi.n	8002c60 <HAL_SPI_Transmit+0x1f4>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d102      	bne.n	8002c66 <HAL_SPI_Transmit+0x1fa>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c6a:	e026      	b.n	8002cba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1cd      	bne.n	8002c12 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fba4 	bl	80033c8 <SPI_EndRxTxTransaction>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	77fb      	strb	r3, [r7, #31]
 8002cb6:	e000      	b.n	8002cba <HAL_SPI_Transmit+0x24e>
  }

error:
 8002cb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf0:	d112      	bne.n	8002d18 <HAL_SPI_Receive+0x44>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10e      	bne.n	8002d18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f8e9 	bl	8002ee6 <HAL_SPI_TransmitReceive>
 8002d14:	4603      	mov	r3, r0
 8002d16:	e0e2      	b.n	8002ede <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_SPI_Receive+0x52>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0db      	b.n	8002ede <HAL_SPI_Receive+0x20a>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d2e:	f7fe ff8b 	bl	8001c48 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d44:	e0c2      	b.n	8002ecc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Receive+0x7e>
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d56:	e0b9      	b.n	8002ecc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9e:	d107      	bne.n	8002db0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d007      	beq.n	8002dce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d162      	bne.n	8002e9c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002dd6:	e02e      	b.n	8002e36 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d115      	bne.n	8002e12 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f103 020c 	add.w	r2, r3, #12
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	7812      	ldrb	r2, [r2, #0]
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e10:	e011      	b.n	8002e36 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e12:	f7fe ff19 	bl	8001c48 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d803      	bhi.n	8002e2a <HAL_SPI_Receive+0x156>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d102      	bne.n	8002e30 <HAL_SPI_Receive+0x15c>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e34:	e04a      	b.n	8002ecc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1cb      	bne.n	8002dd8 <HAL_SPI_Receive+0x104>
 8002e40:	e031      	b.n	8002ea6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d113      	bne.n	8002e78 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e76:	e011      	b.n	8002e9c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e78:	f7fe fee6 	bl	8001c48 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d803      	bhi.n	8002e90 <HAL_SPI_Receive+0x1bc>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_Receive+0x1c2>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e9a:	e017      	b.n	8002ecc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1cd      	bne.n	8002e42 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fa27 	bl	80032fe <SPI_EndRxTransaction>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
 8002ec8:	e000      	b.n	8002ecc <HAL_SPI_Receive+0x1f8>
  }

error :
 8002eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b08c      	sub	sp, #48	; 0x30
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x26>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e18a      	b.n	8003222 <HAL_SPI_TransmitReceive+0x33c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f14:	f7fe fe98 	bl	8001c48 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d00f      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x70>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3c:	d107      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x68>
 8002f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d003      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f54:	e15b      	b.n	800320e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x82>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x82>
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f6e:	e14e      	b.n	800320e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d003      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2205      	movs	r2, #5
 8002f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	887a      	ldrh	r2, [r7, #2]
 8002f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	887a      	ldrh	r2, [r7, #2]
 8002fa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d007      	beq.n	8002fd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe0:	d178      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x10a>
 8002fea:	8b7b      	ldrh	r3, [r7, #26]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d166      	bne.n	80030be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003014:	e053      	b.n	80030be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d11b      	bne.n	800305c <HAL_SPI_TransmitReceive+0x176>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_SPI_TransmitReceive+0x176>
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d113      	bne.n	800305c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d119      	bne.n	800309e <HAL_SPI_TransmitReceive+0x1b8>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d014      	beq.n	800309e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	b292      	uxth	r2, r2
 8003080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800309a:	2301      	movs	r3, #1
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800309e:	f7fe fdd3 	bl	8001c48 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d807      	bhi.n	80030be <HAL_SPI_TransmitReceive+0x1d8>
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d003      	beq.n	80030be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030bc:	e0a7      	b.n	800320e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1a6      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x130>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1a1      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x130>
 80030d2:	e07c      	b.n	80031ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x1fc>
 80030dc:	8b7b      	ldrh	r3, [r7, #26]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d16b      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003108:	e057      	b.n	80031ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d11c      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x26c>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x26c>
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d114      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d119      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x2ae>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d014      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003194:	f7fe fd58 	bl	8001c48 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d803      	bhi.n	80031ac <HAL_SPI_TransmitReceive+0x2c6>
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x2cc>
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031b8:	e029      	b.n	800320e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1a2      	bne.n	800310a <HAL_SPI_TransmitReceive+0x224>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d19d      	bne.n	800310a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f8f8 	bl	80033c8 <SPI_EndRxTxTransaction>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031ea:	e010      	b.n	800320e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	e000      	b.n	800320e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800320c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800321e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003222:	4618      	mov	r0, r3
 8003224:	3730      	adds	r7, #48	; 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	e04c      	b.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d048      	beq.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003244:	f7fe fd00 	bl	8001c48 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d902      	bls.n	800325a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d111      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327c:	d004      	beq.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	d107      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a0:	d10f      	bne.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e00f      	b.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1a3      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af02      	add	r7, sp, #8
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003312:	d111      	bne.n	8003338 <SPI_EndRxTransaction+0x3a>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	d004      	beq.n	8003328 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d107      	bne.n	8003338 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003340:	d12a      	bne.n	8003398 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d012      	beq.n	8003372 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff ff67 	bl	800322a <SPI_WaitFlagStateUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d02d      	beq.n	80033be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e026      	b.n	80033c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2200      	movs	r2, #0
 800337a:	2101      	movs	r1, #1
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ff54 	bl	800322a <SPI_WaitFlagStateUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e013      	b.n	80033c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	2101      	movs	r1, #1
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff ff41 	bl	800322a <SPI_WaitFlagStateUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e000      	b.n	80033c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <SPI_EndRxTxTransaction+0x7c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <SPI_EndRxTxTransaction+0x80>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0d5b      	lsrs	r3, r3, #21
 80033e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f2:	d112      	bne.n	800341a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ff13 	bl	800322a <SPI_WaitFlagStateUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e00f      	b.n	800343a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3b01      	subs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d0f2      	beq.n	800341a <SPI_EndRxTxTransaction+0x52>
 8003434:	e000      	b.n	8003438 <SPI_EndRxTxTransaction+0x70>
        break;
 8003436:	bf00      	nop
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000014 	.word	0x20000014
 8003448:	165e9f81 	.word	0x165e9f81

0800344c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01d      	b.n	800349a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fb36 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 f8e4 	bl	8003658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b085      	sub	sp, #20
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_ConfigClockSource+0x18>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0a6      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x166>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003520:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003528:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d067      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x120>
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d80b      	bhi.n	8003556 <HAL_TIM_ConfigClockSource+0x6c>
 800353e:	2b10      	cmp	r3, #16
 8003540:	d073      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x140>
 8003542:	2b10      	cmp	r3, #16
 8003544:	d802      	bhi.n	800354c <HAL_TIM_ConfigClockSource+0x62>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d06f      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800354a:	e078      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800354c:	2b20      	cmp	r3, #32
 800354e:	d06c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x140>
 8003550:	2b30      	cmp	r3, #48	; 0x30
 8003552:	d06a      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003554:	e073      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003556:	2b70      	cmp	r3, #112	; 0x70
 8003558:	d00d      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x8c>
 800355a:	2b70      	cmp	r3, #112	; 0x70
 800355c:	d804      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x7e>
 800355e:	2b50      	cmp	r3, #80	; 0x50
 8003560:	d033      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0xe0>
 8003562:	2b60      	cmp	r3, #96	; 0x60
 8003564:	d041      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003566:	e06a      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d066      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x152>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d017      	beq.n	80035a4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003574:	e063      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f000 f961 	bl	800384c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003598:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	609a      	str	r2, [r3, #8]
      break;
 80035a2:	e04c      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f000 f94a 	bl	800384c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c6:	609a      	str	r2, [r3, #8]
      break;
 80035c8:	e039      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 f8be 	bl	8003758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2150      	movs	r1, #80	; 0x50
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f917 	bl	8003816 <TIM_ITRx_SetConfig>
      break;
 80035e8:	e029      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 f8dd 	bl	80037b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2160      	movs	r1, #96	; 0x60
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f907 	bl	8003816 <TIM_ITRx_SetConfig>
      break;
 8003608:	e019      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	461a      	mov	r2, r3
 8003618:	f000 f89e 	bl	8003758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2140      	movs	r1, #64	; 0x40
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f8f7 	bl	8003816 <TIM_ITRx_SetConfig>
      break;
 8003628:	e009      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f000 f8ee 	bl	8003816 <TIM_ITRx_SetConfig>
      break;
 800363a:	e000      	b.n	800363e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800363c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a34      	ldr	r2, [pc, #208]	; (800373c <TIM_Base_SetConfig+0xe4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00f      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003676:	d00b      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a31      	ldr	r2, [pc, #196]	; (8003740 <TIM_Base_SetConfig+0xe8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a30      	ldr	r2, [pc, #192]	; (8003744 <TIM_Base_SetConfig+0xec>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <TIM_Base_SetConfig+0xf0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <TIM_Base_SetConfig+0xe4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01b      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d017      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <TIM_Base_SetConfig+0xe8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a21      	ldr	r2, [pc, #132]	; (8003744 <TIM_Base_SetConfig+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00f      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <TIM_Base_SetConfig+0xf0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <TIM_Base_SetConfig+0xf4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <TIM_Base_SetConfig+0xf8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <TIM_Base_SetConfig+0xfc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d108      	bne.n	80036f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <TIM_Base_SetConfig+0xe4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d103      	bne.n	8003728 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	615a      	str	r2, [r3, #20]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40000c00 	.word	0x40000c00
 800374c:	40014000 	.word	0x40014000
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800

08003758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0201 	bic.w	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f023 030a 	bic.w	r3, r3, #10
 8003794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0210 	bic.w	r2, r3, #16
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	031b      	lsls	r3, r3, #12
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	f043 0307 	orr.w	r3, r3, #7
 8003838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	021a      	lsls	r2, r3, #8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	431a      	orrs	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	609a      	str	r2, [r3, #8]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e050      	b.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d013      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a13      	ldr	r2, [pc, #76]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10c      	bne.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4313      	orrs	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40014000 	.word	0x40014000

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	4e0d      	ldr	r6, [pc, #52]	; (80039a0 <__libc_init_array+0x38>)
 800396c:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 800396e:	1ba4      	subs	r4, r4, r6
 8003970:	10a4      	asrs	r4, r4, #2
 8003972:	2500      	movs	r5, #0
 8003974:	42a5      	cmp	r5, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	4e0b      	ldr	r6, [pc, #44]	; (80039a8 <__libc_init_array+0x40>)
 800397a:	4c0c      	ldr	r4, [pc, #48]	; (80039ac <__libc_init_array+0x44>)
 800397c:	f000 f820 	bl	80039c0 <_init>
 8003980:	1ba4      	subs	r4, r4, r6
 8003982:	10a4      	asrs	r4, r4, #2
 8003984:	2500      	movs	r5, #0
 8003986:	42a5      	cmp	r5, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003990:	4798      	blx	r3
 8003992:	3501      	adds	r5, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800399a:	4798      	blx	r3
 800399c:	3501      	adds	r5, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	080039f0 	.word	0x080039f0
 80039a4:	080039f0 	.word	0x080039f0
 80039a8:	080039f0 	.word	0x080039f0
 80039ac:	080039f4 	.word	0x080039f4

080039b0 <memset>:
 80039b0:	4402      	add	r2, r0
 80039b2:	4603      	mov	r3, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <_init>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr

080039cc <_fini>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr
