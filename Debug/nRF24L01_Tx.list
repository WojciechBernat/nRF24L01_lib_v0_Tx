
nRF24L01_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003928  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad0  08003ad0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ad8  08003ad8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000020  08003b00  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003b00  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d4  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dd5  00000000  00000000  0002d824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015fd7  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0e8  00000000  00000000  000470df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088bbd  00000000  00000000  000511c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  000d9e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003aa8 	.word	0x08003aa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08003aa8 	.word	0x08003aa8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a6e      	ldr	r2, [pc, #440]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b6c      	ldr	r3, [pc, #432]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b68      	ldr	r3, [pc, #416]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a67      	ldr	r2, [pc, #412]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b65      	ldr	r3, [pc, #404]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a60      	ldr	r2, [pc, #384]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b5e      	ldr	r3, [pc, #376]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b5a      	ldr	r3, [pc, #360]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a59      	ldr	r2, [pc, #356]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b57      	ldr	r3, [pc, #348]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a52      	ldr	r2, [pc, #328]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b50      	ldr	r3, [pc, #320]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a4b      	ldr	r2, [pc, #300]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b49      	ldr	r3, [pc, #292]	; (80006b0 <MX_GPIO_Init+0x1d8>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4846      	ldr	r0, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 800059c:	f001 fe54 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	4844      	ldr	r0, [pc, #272]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80005a6:	f001 fe4f 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80005b0:	4842      	ldr	r0, [pc, #264]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80005b2:	f001 fe49 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4619      	mov	r1, r3
 80005ca:	483d      	ldr	r0, [pc, #244]	; (80006c0 <MX_GPIO_Init+0x1e8>)
 80005cc:	f001 fca2 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80005d0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80005d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	2303      	movs	r3, #3
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4834      	ldr	r0, [pc, #208]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 80005e6:	f001 fc95 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ea:	2303      	movs	r3, #3
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ee:	2303      	movs	r3, #3
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4831      	ldr	r0, [pc, #196]	; (80006c4 <MX_GPIO_Init+0x1ec>)
 80005fe:	f001 fc89 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000602:	f649 730f 	movw	r3, #40719	; 0x9f0f
 8000606:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	2303      	movs	r3, #3
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4827      	ldr	r0, [pc, #156]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000618:	f001 fc7c 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800061c:	2310      	movs	r3, #16
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <MX_GPIO_Init+0x1dc>)
 8000634:	f001 fc6e 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000638:	2310      	movs	r3, #16
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	481a      	ldr	r0, [pc, #104]	; (80006b8 <MX_GPIO_Init+0x1e0>)
 8000650:	f001 fc60 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000654:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000658:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065a:	2303      	movs	r3, #3
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4817      	ldr	r0, [pc, #92]	; (80006c8 <MX_GPIO_Init+0x1f0>)
 800066a:	f001 fc53 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800066e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000672:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_GPIO_Init+0x1e4>)
 8000684:	f001 fc46 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin;
 8000688:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_GPIO_Init+0x1e4>)
 80006a2:	f001 fc37 	bl	8001f14 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	; 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40021c00 	.word	0x40021c00
 80006c8:	40020400 	.word	0x40020400

080006cc <statusStrcut_Init>:
static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	nrfStruct->statusStruct.dataReadIrq = 0;
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80006da:	f36f 0300 	bfc	r3, #0, #1
 80006de:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.dataSendIrq = 0;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80006e8:	f36f 0341 	bfc	r3, #1, #1
 80006ec:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.maxRetr = 0;
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80006f6:	f36f 0382 	bfc	r3, #2, #1
 80006fa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000704:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000708:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.txFull = 0;
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000712:	f36f 1386 	bfc	r3, #6, #1
 8000716:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	nrfStruct->statusStruct.packetsLost = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	nrfStruct->statusStruct.packetsRetr = 0;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct) {
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	/* Init settigns struct */
	nrfStruct->setStruct.rxMode = 0;			//set as receiver
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	7813      	ldrb	r3, [r2, #0]
 8000742:	f36f 0300 	bfc	r3, #0, #1
 8000746:	7013      	strb	r3, [r2, #0]
	nrfStruct->setStruct.channel = 0x02; 				//set channel np. 0
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2202      	movs	r2, #2
 800074c:	705a      	strb	r2, [r3, #1]
	nrfStruct->setStruct.dataRate = RF_DataRate_2M;  //lowest data rate
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	709a      	strb	r2, [r3, #2]
	nrfStruct->setStruct.powerRF = RF_PWR_0dBm;		//-12dBm power
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2203      	movs	r2, #3
 8000758:	70da      	strb	r2, [r3, #3]

	nrfStruct->setStruct.ard = 0;		//auto retr. delay 250us
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
	nrfStruct->setStruct.arc = 3;		//auto retr. counter
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2203      	movs	r2, #3
 8000764:	715a      	strb	r2, [r3, #5]

	nrfStruct->setStruct.enableCRC = 1;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7bd3      	ldrb	r3, [r2, #15]
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.codingCRC = 0;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7bd3      	ldrb	r3, [r2, #15]
 8000774:	f36f 0341 	bfc	r3, #1, #1
 8000778:	73d3      	strb	r3, [r2, #15]

	nrfStruct->setStruct.enableTxIrq = 0;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7bd3      	ldrb	r3, [r2, #15]
 800077e:	f36f 0382 	bfc	r3, #2, #1
 8000782:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableRxIrq = 0;
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7bd3      	ldrb	r3, [r2, #15]
 8000788:	f36f 03c3 	bfc	r3, #3, #1
 800078c:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableMaxRtIrq = 0;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7bd3      	ldrb	r3, [r2, #15]
 8000792:	f36f 1304 	bfc	r3, #4, #1
 8000796:	73d3      	strb	r3, [r2, #15]

	/* Pipe Enable - defult pipe 0 enable only */
	nrfStruct->setStruct.pipeEn = DF_RXADDR;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2203      	movs	r2, #3
 800079c:	719a      	strb	r2, [r3, #6]
	nrfStruct->setStruct.pipeACK = DF_EN_AA;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	223f      	movs	r2, #63	; 0x3f
 80007a2:	71da      	strb	r2, [r3, #7]
	nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	721a      	strb	r2, [r3, #8]

	/* Pipe RX Payload Lenght  */
	uint8_t i;
	for (i = 0; i < 6; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e007      	b.n	80007c0 <settingStruct_Init+0x8a>
		nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	725a      	strb	r2, [r3, #9]
	for (i = 0; i < 6; i++) {
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	3301      	adds	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b05      	cmp	r3, #5
 80007c4:	d9f4      	bls.n	80007b0 <settingStruct_Init+0x7a>
	}

	nrfStruct->setStruct.enableDPL = 0;
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	7bd3      	ldrb	r3, [r2, #15]
 80007ca:	f36f 1345 	bfc	r3, #5, #1
 80007ce:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableAckPay = 0;
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7bd3      	ldrb	r3, [r2, #15]
 80007d4:	f36f 1386 	bfc	r3, #6, #1
 80007d8:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableDynACK = 0;	//enable NO_ACK command
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	7bd3      	ldrb	r3, [r2, #15]
 80007de:	f36f 13c7 	bfc	r3, #7, #1
 80007e2:	73d3      	strb	r3, [r2, #15]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct) {
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	/* Init address struct */
	nrfStruct->addrStruct.addrWidth = longWidth;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2203      	movs	r2, #3
 80007fc:	741a      	strb	r2, [r3, #16]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e007      	b.n	8000814 <addressStruct_Init+0x24>
		nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	22e7      	movs	r2, #231	; 0xe7
 800080c:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < 5; i++) {
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3301      	adds	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d9f4      	bls.n	8000804 <addressStruct_Init+0x14>
	}
	for (i = 0; i < 5; ++i) {
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e007      	b.n	8000830 <addressStruct_Init+0x40>
		nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	22e7      	movs	r2, #231	; 0xe7
 8000828:	759a      	strb	r2, [r3, #22]
	for (i = 0; i < 5; ++i) {
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	3301      	adds	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	2b04      	cmp	r3, #4
 8000834:	d9f4      	bls.n	8000820 <addressStruct_Init+0x30>
	}
	for (i = 0; i < 5; ++i) {
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e007      	b.n	800084c <addressStruct_Init+0x5c>
		nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	22c2      	movs	r2, #194	; 0xc2
 8000844:	76da      	strb	r2, [r3, #27]
	for (i = 0; i < 5; ++i) {
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	3301      	adds	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d9f4      	bls.n	800083c <addressStruct_Init+0x4c>
	}
	nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	22c3      	movs	r2, #195	; 0xc3
 8000856:	f883 2020 	strb.w	r2, [r3, #32]
	nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	22c4      	movs	r2, #196	; 0xc4
 800085e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	22c5      	movs	r2, #197	; 0xc5
 8000866:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	22c6      	movs	r2, #198	; 0xc6
 800086e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct) {
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	/* Init fifo struct */
	nrfStruct->fifoStruct.txReUse = 0;
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800088c:	f36f 0300 	bfc	r3, #0, #1
 8000890:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.rxRead = 0;
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800089a:	f36f 0341 	bfc	r3, #1, #1
 800089e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxFull = 0;
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008a8:	f36f 0382 	bfc	r3, #2, #1
 80008ac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxEmpty = 1;
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.txSend = 0;
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008c4:	f36f 1304 	bfc	r3, #4, #1
 80008c8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txFull = 0;
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008d2:	f36f 1345 	bfc	r3, #5, #1
 80008d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txEmpty = 1;
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE) {
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	603b      	str	r3, [r7, #0]
	/* Put pointer of SPI and TIM structures to nRF alias */
	nrfStruct->nRFspi = HAL_SPIx;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
	nrfStruct->nRFtim = HAL_TIMx;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Put GPIO port pointer and pin number to structure's alias */
	nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
	nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	8b3a      	ldrh	r2, [r7, #24]
 8000918:	869a      	strh	r2, [r3, #52]	; 0x34
	nrfStruct->nRFportCE = HAL_GPIO_CE;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	69fa      	ldr	r2, [r7, #28]
 800091e:	639a      	str	r2, [r3, #56]	; 0x38
	nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	8c3a      	ldrh	r2, [r7, #32]
 8000924:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time) {
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	460b      	mov	r3, r1
 800093c:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0);	//Set star value as 0
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 8000948:	bf00      	nop
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3f8      	bcc.n	800094a <delayUs+0x18>
		;
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	f001 fc66 	bl	8002248 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	f001 fc56 	bl	8002248 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <ceLow>:
void ceLow(nrfStruct_t *nrfStruct) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	f001 fc46 	bl	8002248 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <ceHigh>:
void ceHigh(nrfStruct_t *nrfStruct) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	f001 fc36 	bl	8002248 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <readReg>:

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_REGISTER | addr;
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 80009f4:	f107 030f 	add.w	r3, r7, #15
 80009f8:	617b      	str	r3, [r7, #20]
	uint8_t *pReg = &reg;
 80009fa:	f107 030e 	add.w	r3, r7, #14
 80009fe:	613b      	str	r3, [r7, #16]

	csnLow(nrfStruct);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffaf 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	6979      	ldr	r1, [r7, #20]
 8000a10:	f002 f8a0 	bl	8002b54 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000a14:	2132      	movs	r1, #50	; 0x32
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff8b 	bl	8000932 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a20:	230a      	movs	r3, #10
 8000a22:	2201      	movs	r2, #1
 8000a24:	6939      	ldr	r1, [r7, #16]
 8000a26:	f002 f9c9 	bl	8002dbc <HAL_SPI_Receive>

	csnHigh(nrfStruct);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffaa 	bl	8000984 <csnHigh>
	return reg;
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val) {
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	70fb      	strb	r3, [r7, #3]
 8000a46:	4613      	mov	r3, r2
 8000a48:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd = W_REGISTER | addr;
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000a54:	f107 030b 	add.w	r3, r7, #11
 8000a58:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ff82 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a64:	230a      	movs	r3, #10
 8000a66:	2201      	movs	r2, #1
 8000a68:	68f9      	ldr	r1, [r7, #12]
 8000a6a:	f002 f873 	bl	8002b54 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000a6e:	2132      	movs	r1, #50	; 0x32
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff5e 	bl	8000932 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a7a:	1cb9      	adds	r1, r7, #2
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f002 f868 	bl	8002b54 <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff7d 	bl	8000984 <csnHigh>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <writeRegExt>:

	csnHigh(nrfStruct);
}

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
		size_t bufSize) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = W_REGISTER | addr;
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 8000aac:	f107 0313 	add.w	r3, r7, #19
 8000ab0:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff ff56 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000abc:	230a      	movs	r3, #10
 8000abe:	2201      	movs	r2, #1
 8000ac0:	6979      	ldr	r1, [r7, #20]
 8000ac2:	f002 f847 	bl	8002b54 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000ac6:	2132      	movs	r1, #50	; 0x32
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff ff32 	bl	8000932 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	f002 f96f 	bl	8002dbc <HAL_SPI_Receive>
	SPI_TIMEOUT);

	csnHigh(nrfStruct);
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff50 	bl	8000984 <csnHigh>
}
 8000ae4:	bf00      	nop
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <writeTxPayload>:

	csnHigh(nrfStruct);
	return OK_CODE;
}

uint8_t writeTxPayload(nrfStruct_t *nrfStruct, uint8_t *buf, size_t bufSize) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	if (bufSize < 1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <writeTxPayload+0x16>
		return ERR_CODE;
 8000afe:	23ff      	movs	r3, #255	; 0xff
 8000b00:	e023      	b.n	8000b4a <writeTxPayload+0x5e>
	if (bufSize > 32)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b20      	cmp	r3, #32
 8000b06:	d901      	bls.n	8000b0c <writeTxPayload+0x20>
		bufSize = 32;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	607b      	str	r3, [r7, #4]

	uint8_t cmd = W_TX_PAYLOAD;	//set command mask
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 8000b10:	f107 0313 	add.w	r3, r7, #19
 8000b14:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff ff24 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b20:	230a      	movs	r3, #10
 8000b22:	2201      	movs	r2, #1
 8000b24:	6979      	ldr	r1, [r7, #20]
 8000b26:	f002 f815 	bl	8002b54 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000b2a:	2132      	movs	r1, #50	; 0x32
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff ff00 	bl	8000932 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), buf, bufSize, SPI_TIMEOUT);//read payload
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	f002 f809 	bl	8002b54 <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff ff1e 	bl	8000984 <csnHigh>
	return OK_CODE;
 8000b48:	2301      	movs	r3, #1
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <flushTx>:

	csnHigh(nrfStruct);
	return OK_CODE;
}
/* Flush functions */
uint8_t flushTx(nrfStruct_t *nrfStruct) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_TX;	//set command mask
 8000b5a:	23e1      	movs	r3, #225	; 0xe1
 8000b5c:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000b5e:	f107 030b 	add.w	r3, r7, #11
 8000b62:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fefd 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b6e:	230a      	movs	r3, #10
 8000b70:	2201      	movs	r2, #1
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	f001 ffee 	bl	8002b54 <HAL_SPI_Transmit>
	csnHigh(nrfStruct);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff03 	bl	8000984 <csnHigh>

	if (!readBit(nrfStruct, FIFO_STATUS, bit4)) {	//check FIFO status
 8000b7e:	2204      	movs	r2, #4
 8000b80:	2117      	movs	r1, #23
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f863 	bl	8000c4e <readBit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d108      	bne.n	8000ba0 <flushTx+0x4e>
		nrfStruct->fifoStruct.txEmpty = 0;
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000b94:	f36f 1386 	bfc	r3, #6, #1
 8000b98:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 8000b9c:	23ff      	movs	r3, #255	; 0xff
 8000b9e:	e007      	b.n	8000bb0 <flushTx+0x5e>
	}

	nrfStruct->fifoStruct.txEmpty = 1;
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000baa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <flushRx>:
uint8_t flushRx(nrfStruct_t *nrfStruct) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_RX;	//set command mask
 8000bc0:	23e0      	movs	r3, #224	; 0xe0
 8000bc2:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000bc4:	f107 030b 	add.w	r3, r7, #11
 8000bc8:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff feca 	bl	8000964 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	68f9      	ldr	r1, [r7, #12]
 8000bda:	f001 ffbb 	bl	8002b54 <HAL_SPI_Transmit>
	csnHigh(nrfStruct);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fed0 	bl	8000984 <csnHigh>

	if (!readBit(nrfStruct, FIFO_STATUS, bit0)) {	//check FIFO status
 8000be4:	2200      	movs	r2, #0
 8000be6:	2117      	movs	r1, #23
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f830 	bl	8000c4e <readBit>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d108      	bne.n	8000c06 <flushRx+0x4e>
		nrfStruct->fifoStruct.rxEmpty = 0;
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000bfa:	f36f 03c3 	bfc	r3, #3, #1
 8000bfe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 8000c02:	23ff      	movs	r3, #255	; 0xff
 8000c04:	e007      	b.n	8000c16 <flushRx+0x5e>
	}

	nrfStruct->fifoStruct.rxEmpty = 1;
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <pwrUp>:

}


/* Power control */
void pwrUp(nrfStruct_t *nrfStruct) {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, CONFIG);
 8000c26:	2100      	movs	r1, #0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fedb 	bl	80009e4 <readReg>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << 1);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, CONFIG, tmp);
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fefa 	bl	8000a3a <writeReg>
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <readBit>:
	uint8_t tmp = readReg(nrfStruct, CONFIG);
	tmp &= (0 << 1);		//zmieniono OR na AND
	writeReg(nrfStruct, CONFIG, tmp);
}

uint8_t readBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	70bb      	strb	r3, [r7, #2]
	uint8_t reg = readReg(nrfStruct, addr);
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff febe 	bl	80009e4 <readReg>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	return ((reg >> bit) & 0x01);
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	78bb      	ldrb	r3, [r7, #2]
 8000c70:	fa42 f303 	asr.w	r3, r2, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <resetBit>:

void resetBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	4613      	mov	r3, r2
 8000c92:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	4619      	mov	r1, r3
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fea3 	bl	80009e4 <readReg>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1 << bit);		//zmieniono OR na AND
 8000ca2:	78bb      	ldrb	r3, [r7, #2]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff feba 	bl	8000a3a <writeReg>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <setBit>:

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	70fb      	strb	r3, [r7, #3]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fe7e 	bl	80009e4 <readReg>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << bit);
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	b25a      	sxtb	r2, r3
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	4619      	mov	r1, r3
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fe97 	bl	8000a3a <writeReg>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <nRF_Init>:


/* Main init function */
nrfStruct_t* nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
		GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
		GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	807b      	strh	r3, [r7, #2]
	/* Create main nRF structure	 */
	static nrfStruct_t nRFMainStruct;
	static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

	/* Init settigns struct */
	statusStrcut_Init(pnRFMainStruct);
 8000d22:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <nRF_Init+0x1b8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcd0 	bl	80006cc <statusStrcut_Init>
	settingStruct_Init(pnRFMainStruct);
 8000d2c:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <nRF_Init+0x1b8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fd00 	bl	8000736 <settingStruct_Init>
	addressStruct_Init(pnRFMainStruct);
 8000d36:	4b65      	ldr	r3, [pc, #404]	; (8000ecc <nRF_Init+0x1b8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fd58 	bl	80007f0 <addressStruct_Init>
	fifoStruct_Init(pnRFMainStruct);
 8000d40:	4b62      	ldr	r3, [pc, #392]	; (8000ecc <nRF_Init+0x1b8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd9a 	bl	800087e <fifoStruct_Init>
	hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 8000d4a:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <nRF_Init+0x1b8>)
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	68f9      	ldr	r1, [r7, #12]
 8000d60:	f7ff fdc8 	bl	80008f4 <hardware_Init>
			HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

//	pwrDown(pnRFMainStruct);
	/* Turn on modul */
	pwrUp(pnRFMainStruct);
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <nRF_Init+0x1b8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff58 	bl	8000c1e <pwrUp>

	/* Set default settings */
	setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 8000d6e:	4b57      	ldr	r3, [pc, #348]	; (8000ecc <nRF_Init+0x1b8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffa9 	bl	8000cce <setBit>
	writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <nRF_Init+0x1b8>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <nRF_Init+0x1b8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	79db      	ldrb	r3, [r3, #7]
 8000d86:	461a      	mov	r2, r3
 8000d88:	2101      	movs	r1, #1
 8000d8a:	f7ff fe56 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <nRF_Init+0x1b8>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <nRF_Init+0x1b8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	f7ff fe4d 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 8000da0:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <nRF_Init+0x1b8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2203      	movs	r2, #3
 8000da6:	2103      	movs	r1, #3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fe46 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <nRF_Init+0x1b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2203      	movs	r2, #3
 8000db4:	2104      	movs	r1, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe3f 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 8000dbc:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <nRF_Init+0x1b8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	2105      	movs	r1, #5
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe38 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <nRF_Init+0x1b8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	220e      	movs	r2, #14
 8000dd0:	2106      	movs	r1, #6
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe31 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <nRF_Init+0x1b8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	220e      	movs	r2, #14
 8000dde:	2107      	movs	r1, #7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fe2a 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <nRF_Init+0x1b8>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <nRF_Init+0x1b8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	7a1b      	ldrb	r3, [r3, #8]
 8000df0:	461a      	mov	r2, r3
 8000df2:	211c      	movs	r1, #28
 8000df4:	f7ff fe21 	bl	8000a3a <writeReg>

	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	75fb      	strb	r3, [r7, #23]
 8000dfc:	e00f      	b.n	8000e1e <nRF_Init+0x10a>
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <nRF_Init+0x1b8>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	3311      	adds	r3, #17
 8000e06:	b2d9      	uxtb	r1, r3
				(pnRFMainStruct->setStruct.pipePayLen[i]));
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <nRF_Init+0x1b8>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	4413      	add	r3, r2
 8000e10:	7a5b      	ldrb	r3, [r3, #9]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f7ff fe11 	bl	8000a3a <writeReg>
	for (i = 0; i < 6; i++) {
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d9ec      	bls.n	8000dfe <nRF_Init+0xea>
	}
	writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <nRF_Init+0x1b8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	211d      	movs	r1, #29
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe04 	bl	8000a3a <writeReg>

	/* Set default address */
	writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <nRF_Init+0x1b8>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <nRF_Init+0x1b8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f103 0211 	add.w	r2, r3, #17
 8000e3e:	2305      	movs	r3, #5
 8000e40:	2110      	movs	r1, #16
 8000e42:	f7ff fe26 	bl	8000a92 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.txAddr));
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <nRF_Init+0x1b8>)
 8000e48:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr0),
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <nRF_Init+0x1b8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f103 0216 	add.w	r2, r3, #22
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000e52:	2305      	movs	r3, #5
 8000e54:	210a      	movs	r1, #10
 8000e56:	f7ff fe1c 	bl	8000a92 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr0));
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <nRF_Init+0x1b8>)
 8000e5c:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr1),
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <nRF_Init+0x1b8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f103 021b 	add.w	r2, r3, #27
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000e66:	2305      	movs	r3, #5
 8000e68:	210b      	movs	r1, #11
 8000e6a:	f7ff fe12 	bl	8000a92 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr1));
	writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <nRF_Init+0x1b8>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <nRF_Init+0x1b8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	210c      	movs	r1, #12
 8000e7e:	f7ff fddc 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <nRF_Init+0x1b8>)
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <nRF_Init+0x1b8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8e:	461a      	mov	r2, r3
 8000e90:	210d      	movs	r1, #13
 8000e92:	f7ff fdd2 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <nRF_Init+0x1b8>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <nRF_Init+0x1b8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	210e      	movs	r1, #14
 8000ea6:	f7ff fdc8 	bl	8000a3a <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <nRF_Init+0x1b8>)
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <nRF_Init+0x1b8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	210f      	movs	r1, #15
 8000eba:	f7ff fdbe 	bl	8000a3a <writeReg>

	return pnRFMainStruct;
 8000ebe:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <nRF_Init+0x1b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t j;
	for (j = 0; j < BUF_SIZE; j++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	e008      	b.n	8000eee <main+0x1e>
		TransmitData[j] = 'A' + j;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	3241      	adds	r2, #65	; 0x41
 8000ee2:	b2d1      	uxtb	r1, r2
 8000ee4:	4a78      	ldr	r2, [pc, #480]	; (80010c8 <main+0x1f8>)
 8000ee6:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j < BUF_SIZE; j++) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	3301      	adds	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b1f      	cmp	r3, #31
 8000ef2:	d9f3      	bls.n	8000edc <main+0xc>
	}
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fe94 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f8fe 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff faec 	bl	80004d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f00:	f000 fdf2 	bl	8001ae8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000f04:	f000 fd06 	bl	8001914 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000f08:	4870      	ldr	r0, [pc, #448]	; (80010cc <main+0x1fc>)
 8000f0a:	f002 fb3e 	bl	800358a <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if  TEST_CONFIG
	/* 0. Create pointer and init structure. */
	nrfStruct_t *testStruct;						// create pointer to struct
	testStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin, CE_GPIO_Port,
 8000f0e:	2310      	movs	r3, #16
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <main+0x200>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2310      	movs	r3, #16
 8000f18:	4a6e      	ldr	r2, [pc, #440]	; (80010d4 <main+0x204>)
 8000f1a:	496c      	ldr	r1, [pc, #432]	; (80010cc <main+0x1fc>)
 8000f1c:	486e      	ldr	r0, [pc, #440]	; (80010d8 <main+0x208>)
 8000f1e:	f7ff fef9 	bl	8000d14 <nRF_Init>
 8000f22:	6038      	str	r0, [r7, #0]
	CE_Pin);	// create struct
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000f24:	2100      	movs	r1, #0
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f7ff fd5c 	bl	80009e4 <readReg>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b6a      	ldr	r3, [pc, #424]	; (80010dc <main+0x20c>)
 8000f32:	601a      	str	r2, [r3, #0]

	/* 1.1  Set role as RX */
	modeTX(testStruct);
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f000 f993 	bl	8001260 <modeTX>
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff fd51 	bl	80009e4 <readReg>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b65      	ldr	r3, [pc, #404]	; (80010dc <main+0x20c>)
 8000f48:	601a      	str	r2, [r3, #0]
	/* 1.2 Enable CRC and set coding */
	enableCRC(testStruct);
 8000f4a:	6838      	ldr	r0, [r7, #0]
 8000f4c:	f000 fa39 	bl	80013c2 <enableCRC>
	setCRC(testStruct, CRC_16_bits);
 8000f50:	2101      	movs	r1, #1
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f000 fa47 	bl	80013e6 <setCRC>
	/* 1.3 Enable/disable interrupts */
	enableRXinterrupt(testStruct);
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f000 f9b4 	bl	80012c6 <enableRXinterrupt>
	enableTXinterrupt(testStruct);
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f000 f9c3 	bl	80012ea <enableTXinterrupt>
	/* 2. Set ACK for RX pipe  */
	enableAutoAckPipe(testStruct, 0);
 8000f64:	2100      	movs	r1, #0
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f000 fa70 	bl	800144c <enableAutoAckPipe>
	/* 3. Set RX pipe */
	enableRxAddr(testStruct, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	6838      	ldr	r0, [r7, #0]
 8000f70:	f000 fa93 	bl	800149a <enableRxAddr>

	/* 4. Set RX/TX address width */
	setAddrWidth(testStruct, longWidth);
 8000f74:	2103      	movs	r1, #3
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f000 fab6 	bl	80014e8 <setAddrWidth>

	/* 5. Set ARD and ARC */
	setAutoRetrCount(testStruct, 4);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f000 fac5 	bl	800150e <setAutoRetrCount>
	setAutoRetrDelay(testStruct, 3); //500us
 8000f84:	2103      	movs	r1, #3
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f000 fae8 	bl	800155c <setAutoRetrDelay>

	/* 6. Set RF channel */
	setChannel(testStruct, 2);
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	f000 fb15 	bl	80015be <setChannel>

	/* 7. Set RF power and Data Rate */
	setRFpower(testStruct, RF_PWR_0dBm);
 8000f94:	2103      	movs	r1, #3
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f000 fb2a 	bl	80015f0 <setRFpower>
	setDataRate(testStruct, RF_DataRate_250);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f000 fb4b 	bl	800163a <setDataRate>

	/* 8 Set RX address */
	setReceivePipeAddress(testStruct, 0, ReceiveAddress,
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <main+0x210>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f000 fb8c 	bl	80016c8 <setReceivePipeAddress>
			sizeof(ReceiveAddress));

	/* 9. Set TX address */
	setTransmitPipeAddress(testStruct, TransmitAddress,
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	494c      	ldr	r1, [pc, #304]	; (80010e4 <main+0x214>)
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f000 fc1b 	bl	80017f0 <setTransmitPipeAddress>
			sizeof(TransmitAddress));

#if TEST_STATIC_LENGTH
	setRxPayloadWidth(testStruct, 0, BUF_SIZE);
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f000 fc43 	bl	800184a <setRxPayloadWidth>
	regTmp = readReg(testStruct, RX_PW_P0);
 8000fc4:	2111      	movs	r1, #17
 8000fc6:	6838      	ldr	r0, [r7, #0]
 8000fc8:	f7ff fd0c 	bl	80009e4 <readReg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b42      	ldr	r3, [pc, #264]	; (80010dc <main+0x20c>)
 8000fd2:	601a      	str	r2, [r3, #0]
#endif
#if TEST_DYNAMIC_LENGTH
	enableDynamicPayloadLength(testStruct);
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f000 fc8b 	bl	80018f0 <enableDynamicPayloadLength>
	enableDynamicPayloadLengthPipe(testStruct, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f000 fc60 	bl	80018a2 <enableDynamicPayloadLengthPipe>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

#if TEST_DYNAMIC_LENGTH
		if (counter == 31)	//overwrite proctect
 8000fe2:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <main+0x218>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b1f      	cmp	r3, #31
 8000fe8:	d102      	bne.n	8000ff0 <main+0x120>
			counter = 0;
 8000fea:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <main+0x218>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < BUF_SIZE; j++) {	//clean buffer
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	e006      	b.n	8001004 <main+0x134>
			TransmitData[j] = 0;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <main+0x1f8>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < BUF_SIZE; j++) {	//clean buffer
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3301      	adds	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b1f      	cmp	r3, #31
 8001008:	d9f5      	bls.n	8000ff6 <main+0x126>
		}
		for (j = 0; j < counter; j++) {		//write content
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e008      	b.n	8001022 <main+0x152>
			TransmitData[j] = 'A' + j;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	3241      	adds	r2, #65	; 0x41
 8001016:	b2d1      	uxtb	r1, r2
 8001018:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <main+0x1f8>)
 800101a:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < counter; j++) {		//write content
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	3301      	adds	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <main+0x218>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3f1      	bcc.n	8001010 <main+0x140>
		}
		TransmitData[counter + 1] = counter + 48;	//write counter
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <main+0x218>)
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <main+0x218>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	3230      	adds	r2, #48	; 0x30
 8001038:	b2d1      	uxtb	r1, r2
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <main+0x1f8>)
 800103c:	54d1      	strb	r1, [r2, r3]
		counter++;
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <main+0x218>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <main+0x218>)
 8001048:	701a      	strb	r2, [r3, #0]

		HAL_Delay(999);
 800104a:	f240 30e7 	movw	r0, #999	; 0x3e7
 800104e:	f000 fe59 	bl	8001d04 <HAL_Delay>
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <main+0x21c>)
 800105a:	f001 f8f5 	bl	8002248 <HAL_GPIO_WritePin>
		sendStatus = sendPayload(testStruct, TransmitData, counter);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <main+0x218>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4918      	ldr	r1, [pc, #96]	; (80010c8 <main+0x1f8>)
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 f8b6 	bl	80011d8 <sendPayload>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <main+0x220>)
 8001072:	601a      	str	r2, [r3, #0]
		txFifoStatus = getTX_DS(testStruct);
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f000 f986 	bl	8001386 <getTX_DS>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <main+0x224>)
 8001080:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f000 fe3d 	bl	8001d04 <HAL_Delay>
		txFifoStatus = getTX_DS(testStruct);
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f000 f97b 	bl	8001386 <getTX_DS>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <main+0x224>)
 8001096:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109e:	4813      	ldr	r0, [pc, #76]	; (80010ec <main+0x21c>)
 80010a0:	f001 f8d2 	bl	8002248 <HAL_GPIO_WritePin>
		txFifoStatus = getTX_DS(testStruct);
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	f000 f96e 	bl	8001386 <getTX_DS>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <main+0x224>)
 80010b0:	701a      	strb	r2, [r3, #0]
		if (getStatusFullTxFIFO(testStruct)) {	//clean tx fifo if full
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f000 fae6 	bl	8001684 <getStatusFullTxFIFO>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d091      	beq.n	8000fe2 <main+0x112>
			flushTx(testStruct);
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	f7ff fd47 	bl	8000b52 <flushTx>
		if (counter == 31)	//overwrite proctect
 80010c4:	e78d      	b.n	8000fe2 <main+0x112>
 80010c6:	bf00      	nop
 80010c8:	20000088 	.word	0x20000088
 80010cc:	20000120 	.word	0x20000120
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	200000c8 	.word	0x200000c8
 80010dc:	20000080 	.word	0x20000080
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20000084 	.word	0x20000084
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	20000085 	.word	0x20000085

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fcc6 	bl	8003a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <SystemClock_Config+0xc8>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <SystemClock_Config+0xcc>)
 8001142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001168:	2308      	movs	r3, #8
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800116c:	2348      	movs	r3, #72	; 0x48
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f001 f87d 	bl	800227c <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 f81e 	bl	80011c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fad7 	bl	800275c <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b4:	f000 f808 	bl	80011c8 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <sendPayload>:
#include "settingModule.h"
#include "highLevelModule.h"

extern uint8_t txFifoStatus;
uint8_t sendPayload(nrfStruct_t *nrfStruct, uint8_t *buf, size_t bufSize) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]

	if (HAL_GPIO_ReadPin(CSN_GPIO_Port, CSN_Pin)) {
 80011e4:	2110      	movs	r1, #16
 80011e6:	481d      	ldr	r0, [pc, #116]	; (800125c <sendPayload+0x84>)
 80011e8:	f001 f816 	bl	8002218 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <sendPayload+0x20>
		ceLow(nrfStruct);
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff fbd6 	bl	80009a4 <ceLow>
	}
	if (getStatusFullTxFIFO(nrfStruct)) {
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 fa43 	bl	8001684 <getStatusFullTxFIFO>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <sendPayload+0x32>
		flushTx(nrfStruct);
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff fca4 	bl	8000b52 <flushTx>
	}
	if (getTX_DS(nrfStruct)) {
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 f8bb 	bl	8001386 <getTX_DS>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <sendPayload+0x44>
		clearTX_DS(nrfStruct);
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f88d 	bl	8001336 <clearTX_DS>
	}
	if (writeTxPayload(nrfStruct, buf, bufSize)) {
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff fc63 	bl	8000aec <writeTxPayload>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d011      	beq.n	8001250 <sendPayload+0x78>
		ceHigh(nrfStruct);
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff fbc9 	bl	80009c4 <ceHigh>
		delayUs(nrfStruct, CE_HIGH_TIME);
 8001232:	210b      	movs	r1, #11
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fb7c 	bl	8000932 <delayUs>
		ceLow(nrfStruct);
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fbb2 	bl	80009a4 <ceLow>
		if (getTX_DS(nrfStruct)) {
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f8a0 	bl	8001386 <getTX_DS>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <sendPayload+0x78>
			return OK_CODE;
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <sendPayload+0x7a>
		}
	}
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000

08001260 <modeTX>:

/**
 *@Brief	Switch radio module to Transmitter (PTX) mode
 */
void modeTX(nrfStruct_t *nrfStruct)
 {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if (!readBit(nrfStruct, CONFIG, bit1)) {	//Check state of module
 8001268:	2201      	movs	r2, #1
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fcee 	bl	8000c4e <readBit>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <modeTX+0x28>
		pwrUp(nrfStruct);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fcd0 	bl	8000c1e <pwrUp>
		delayUs(nrfStruct, 1500);	//wait 1.5ms fo nRF24L01+ stand up
 800127e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fb55 	bl	8000932 <delayUs>
	}
	flushRx(nrfStruct);			//clear (flush) RX FIFO buffer
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fc95 	bl	8000bb8 <flushRx>
	flushTx(nrfStruct);		//clear (flush) TX FIFO buffer
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fc5f 	bl	8000b52 <flushTx>

	clearRX_DR(nrfStruct);	//clear interrupts flags
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f83a 	bl	800130e <clearRX_DR>
	clearTX_DS(nrfStruct);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f84b 	bl	8001336 <clearTX_DS>
	clearMAX_RT(nrfStruct);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f85c 	bl	800135e <clearMAX_RT>

	ceHigh(nrfStruct);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fb8c 	bl	80009c4 <ceHigh>
	resetBit(nrfStruct, CONFIG, bit0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fce7 	bl	8000c84 <resetBit>
	delayUs(nrfStruct, RX_TX_SETTING_TIME);
 80012b6:	218c      	movs	r1, #140	; 0x8c
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fb3a 	bl	8000932 <delayUs>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <enableRXinterrupt>:
	resetBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 0;
}

void enableRXinterrupt(nrfStruct_t *nrfStruct)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit6);
 80012ce:	2206      	movs	r2, #6
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fcfb 	bl	8000cce <setBit>
	nrfStruct->setStruct.enableRxIrq = 1;
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	7bd3      	ldrb	r3, [r2, #15]
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	73d3      	strb	r3, [r2, #15]
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <enableTXinterrupt>:
void enableTXinterrupt(nrfStruct_t *nrfStruct)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit5);
 80012f2:	2205      	movs	r2, #5
 80012f4:	2100      	movs	r1, #0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fce9 	bl	8000cce <setBit>
	nrfStruct->setStruct.enableTxIrq = 1;
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	7bd3      	ldrb	r3, [r2, #15]
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	73d3      	strb	r3, [r2, #15]
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <clearRX_DR>:
	setBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 1;
}

void clearRX_DR(nrfStruct_t *nrfStruct)
{ //clear irt bits in Status Register
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit6);
 8001316:	2206      	movs	r2, #6
 8001318:	2107      	movs	r1, #7
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fcd7 	bl	8000cce <setBit>
	nrfStruct->statusStruct.dataReadIrq = 0;
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001326:	f36f 0300 	bfc	r3, #0, #1
 800132a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <clearTX_DS>:
void clearTX_DS(nrfStruct_t *nrfStruct)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit5);
 800133e:	2205      	movs	r2, #5
 8001340:	2107      	movs	r1, #7
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fcc3 	bl	8000cce <setBit>
	nrfStruct->statusStruct.dataSendIrq = 0;
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800134e:	f36f 0341 	bfc	r3, #1, #1
 8001352:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <clearMAX_RT>:
void clearMAX_RT(nrfStruct_t *nrfStruct)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit4);
 8001366:	2204      	movs	r2, #4
 8001368:	2107      	movs	r1, #7
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fcaf 	bl	8000cce <setBit>
	nrfStruct->statusStruct.maxRetr = 0;
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001376:	f36f 0382 	bfc	r3, #2, #1
 800137a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <getTX_DS>:
uint8_t getRX_DR(nrfStruct_t *nrfStruct) {
	nrfStruct->statusStruct.dataReadIrq = readBit(nrfStruct, STATUS, bit6);
	return (nrfStruct->statusStruct.dataReadIrq);
}

uint8_t getTX_DS(nrfStruct_t *nrfStruct) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	nrfStruct->statusStruct.dataSendIrq = readBit(nrfStruct, STATUS, bit5);
 800138e:	2205      	movs	r2, #5
 8001390:	2107      	movs	r1, #7
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fc5b 	bl	8000c4e <readBit>
 8001398:	4603      	mov	r3, r0
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80013a6:	f361 0341 	bfi	r3, r1, #1, #1
 80013aa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	return (nrfStruct->statusStruct.dataSendIrq);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013b8:	b2db      	uxtb	r3, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <enableCRC>:
		nrfStruct->statusStruct.maxRetr = readBit(nrfStruct, STATUS, bit4);
		return (nrfStruct->statusStruct.maxRetr);
	}
/* CRC functions */
void enableCRC(nrfStruct_t *nrfStruct)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit3);
 80013ca:	2203      	movs	r2, #3
 80013cc:	2100      	movs	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fc7d 	bl	8000cce <setBit>
	nrfStruct->setStruct.enableCRC = 1;
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7bd3      	ldrb	r3, [r2, #15]
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	73d3      	strb	r3, [r2, #15]
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <setCRC>:
	resetBit(nrfStruct, CONFIG, bit3);
	nrfStruct->setStruct.enableCRC = 0;
}

void setCRC(nrfStruct_t *nrfStruct, widthCRC_t w)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	70fb      	strb	r3, [r7, #3]
	if (w)
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00a      	beq.n	800140e <setCRC+0x28>
	{
		setBit(nrfStruct, CONFIG, bit2);
 80013f8:	2202      	movs	r2, #2
 80013fa:	2100      	movs	r1, #0
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fc66 	bl	8000cce <setBit>
		nrfStruct->setStruct.codingCRC = 1;
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	7bd3      	ldrb	r3, [r2, #15]
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	73d3      	strb	r3, [r2, #15]
	else
	{
		resetBit(nrfStruct, CONFIG, bit2);
		nrfStruct->setStruct.codingCRC = 0;
	}
}
 800140c:	e009      	b.n	8001422 <setCRC+0x3c>
		resetBit(nrfStruct, CONFIG, bit2);
 800140e:	2202      	movs	r2, #2
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fc36 	bl	8000c84 <resetBit>
		nrfStruct->setStruct.codingCRC = 0;
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	7bd3      	ldrb	r3, [r2, #15]
 800141c:	f36f 0341 	bfc	r3, #1, #1
 8001420:	73d3      	strb	r3, [r2, #15]
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <checkPipe>:

/* Auto ACK */
uint8_t checkPipe(uint8_t pipe)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
	if (pipe >= 0 && pipe <= 5) //check correct pipe number
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d801      	bhi.n	800143e <checkPipe+0x14>
		return 1;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <checkPipe+0x16>
	return 0;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <enableAutoAckPipe>:
uint8_t enableAutoAckPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffe5 	bl	800142a <checkPipe>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d014      	beq.n	8001490 <enableAutoAckPipe+0x44>
	{
		setBit(nrfStruct, EN_AA, pipe);
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	461a      	mov	r2, r3
 800146a:	2101      	movs	r1, #1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fc2e 	bl	8000cce <setBit>
		nrfStruct->setStruct.pipeACK |= (1 << pipe);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	79db      	ldrb	r3, [r3, #7]
 8001476:	b25a      	sxtb	r2, r3
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	b25b      	sxtb	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	71da      	strb	r2, [r3, #7]
		return 1;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <enableAutoAckPipe+0x46>
	}
	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <enableRxAddr>:
	return 0;
}

/* RX addresses */
uint8_t enableRxAddr(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ffbe 	bl	800142a <checkPipe>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d014      	beq.n	80014de <enableRxAddr+0x44>
	{
		setBit(nrfStruct, EN_RXADDR, pipe);
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	461a      	mov	r2, r3
 80014b8:	2102      	movs	r1, #2
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fc07 	bl	8000cce <setBit>
		nrfStruct->setStruct.pipeEn |= (1 << pipe);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	799b      	ldrb	r3, [r3, #6]
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	719a      	strb	r2, [r3, #6]
		return 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <enableRxAddr+0x46>
	}
	return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <setAddrWidth>:
	return 0;
}

/* Address Width */
void setAddrWidth(nrfStruct_t *nrfStruct, addressWidth_t width)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
	writeReg(nrfStruct, SETUP_AW, width);
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2103      	movs	r1, #3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fa9d 	bl	8000a3a <writeReg>
	nrfStruct->addrStruct.addrWidth = width;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	78fa      	ldrb	r2, [r7, #3]
 8001504:	741a      	strb	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <setAutoRetrCount>:

/* Setup retransmission */
uint8_t setAutoRetrCount(nrfStruct_t *nrfStruct, uint8_t count)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
	if (count >= 0x00 && count <= 0x0F)
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d818      	bhi.n	8001552 <setAutoRetrCount+0x44>
	{					//check count val
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR); 	//read reg. val
 8001520:	2104      	movs	r1, #4
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fa5e 	bl	80009e4 <readReg>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0xF0;							// reset LSB and save MSB
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f023 030f 	bic.w	r3, r3, #15
 8001532:	73fb      	strb	r3, [r7, #15]
		tmp |= count;									//add tmp and count
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	4313      	orrs	r3, r2
 800153a:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);			//write to SETUP_RETR
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	461a      	mov	r2, r3
 8001540:	2104      	movs	r1, #4
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fa79 	bl	8000a3a <writeReg>
		nrfStruct->setStruct.arc = count;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	715a      	strb	r2, [r3, #5]
		return OK_CODE;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <setAutoRetrCount+0x46>
	}
	return ERR_CODE;
 8001552:	23ff      	movs	r3, #255	; 0xff
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <setAutoRetrDelay>:

uint8_t setAutoRetrDelay(nrfStruct_t *nrfStruct, uint8_t delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
	if (delay > 0x0F)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	d902      	bls.n	8001574 <setAutoRetrDelay+0x18>
	{						//if delay in MSB format
		delay = delay >> 4; //shift to LSB format
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	70fb      	strb	r3, [r7, #3]
	}
	if (delay >= 0x00 && delay <= 0x0F)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d81c      	bhi.n	80015b4 <setAutoRetrDelay+0x58>
	{
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR);
 800157a:	2104      	movs	r1, #4
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fa31 	bl	80009e4 <readReg>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0x0F;	//save LSB, reset MSB
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	73fb      	strb	r3, [r7, #15]
		tmp |= (delay << 4); //add tmp and delay
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	b25a      	sxtb	r2, r3
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	4313      	orrs	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	461a      	mov	r2, r3
 80015a2:	2104      	movs	r1, #4
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fa48 	bl	8000a3a <writeReg>
		nrfStruct->setStruct.ard = delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	711a      	strb	r2, [r3, #4]
		return OK_CODE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <setAutoRetrDelay+0x5a>
	}
	return ERR_CODE;
 80015b4:	23ff      	movs	r3, #255	; 0xff
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <setChannel>:

/* RF channel */
uint8_t setChannel(nrfStruct_t *nrfStruct, uint8_t channel)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]
	if (channel >= 0 && channel <= 125)
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	2b7d      	cmp	r3, #125	; 0x7d
 80015ce:	d80a      	bhi.n	80015e6 <setChannel+0x28>
	{
		writeReg(nrfStruct, RF_CH, channel); //Maximum channel limited to 125 by hardware
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2105      	movs	r1, #5
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fa2f 	bl	8000a3a <writeReg>
		nrfStruct->setStruct.channel = channel;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	705a      	strb	r2, [r3, #1]
		return OK_CODE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <setChannel+0x2a>
	}
	return ERR_CODE;
 80015e6:	23ff      	movs	r3, #255	; 0xff
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <setRFpower>:
		return 0;
}


void setRFpower(nrfStruct_t *nrfStruct, powerRF_t power)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	/*
	if (power > RF_PWR_0dBm && power < RF_PWR_18dBm)
	 return ERR_CODE;*/
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); //
 80015fc:	2106      	movs	r1, #6
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff f9f0 	bl	80009e4 <readReg>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0xF8;					  //0xF8 - 1111 1000B reset 3 LSB
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	f023 0307 	bic.w	r3, r3, #7
 800160e:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (power << 1);			  //combining tmp and shifted power
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b25a      	sxtb	r2, r3
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4313      	orrs	r3, r2
 800161c:	b25b      	sxtb	r3, r3
 800161e:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	461a      	mov	r2, r3
 8001624:	2106      	movs	r1, #6
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fa07 	bl	8000a3a <writeReg>
	nrfStruct->setStruct.powerRF = power;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	70da      	strb	r2, [r3, #3]

}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <setDataRate>:

void setDataRate(nrfStruct_t *nrfStruct, dataRate_t rate)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); 	//
 8001646:	2106      	movs	r1, #6
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff f9cb 	bl	80009e4 <readReg>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0x06;//0x06 = 0000 0110B - reset data rate's bits - Also this line reset PLL_LOCK and CONT_WAVE bits
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f003 0306 	and.w	r3, r3, #6
 8001658:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (rate << 3);			  //combining tmp and shifted data rate
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	b25a      	sxtb	r2, r3
 8001660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001664:	4313      	orrs	r3, r2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	461a      	mov	r2, r3
 800166e:	2106      	movs	r1, #6
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff f9e2 	bl	8000a3a <writeReg>
	nrfStruct->setStruct.dataRate = rate;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	709a      	strb	r2, [r3, #2]
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <getStatusFullTxFIFO>:

/* Status */
uint8_t getStatusFullTxFIFO(nrfStruct_t *nrfStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if (readBit(nrfStruct, STATUS, bit0)) {
 800168c:	2200      	movs	r2, #0
 800168e:	2107      	movs	r1, #7
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fadc 	bl	8000c4e <readBit>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <getStatusFullTxFIFO+0x2a>
		nrfStruct->statusStruct.txFull = 1;
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80016a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
		return 1; //TX FIFO full
 80016aa:	2301      	movs	r3, #1
 80016ac:	e007      	b.n	80016be <getStatusFullTxFIFO+0x3a>
	}
	nrfStruct->statusStruct.txFull = 0;
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80016b4:	f36f 1386 	bfc	r3, #6, #1
 80016b8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	return 0;	 //Available locations in TX FIFO
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <setReceivePipeAddress>:
 * @Note	Remember that addresses registers for pipes from 2 to 5 are 1 byte only.
 * 			Also registers for pipe 0 and 1 can have size of from 3 to 5 bytes.
 */
uint8_t setReceivePipeAddress(nrfStruct_t *nrfStruct, uint8_t pipe,
		uint8_t *addrBuf, size_t addrBufSize)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	460b      	mov	r3, r1
 80016d6:	72fb      	strb	r3, [r7, #11]
	if (!checkPipe(pipe)) { //if checkPipe return 0 - end fun. by return 0.
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fea5 	bl	800142a <checkPipe>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <setReceivePipeAddress+0x22>
		return ERR_CODE;
 80016e6:	23ff      	movs	r3, #255	; 0xff
 80016e8:	e07e      	b.n	80017e8 <setReceivePipeAddress+0x120>
	}
	size_t bufSize = 0x05;
 80016ea:	2305      	movs	r3, #5
 80016ec:	617b      	str	r3, [r7, #20]
	if (pipe == 0 || pipe == 1) {	//if pipe 0 or 1 check bufer width
 80016ee:	7afb      	ldrb	r3, [r7, #11]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <setReceivePipeAddress+0x32>
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d13e      	bne.n	8001778 <setReceivePipeAddress+0xb0>
		switch (addrBufSize) {	//check addrBufSize
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d006      	beq.n	800170e <setReceivePipeAddress+0x46>
 8001700:	2b05      	cmp	r3, #5
 8001702:	d007      	beq.n	8001714 <setReceivePipeAddress+0x4c>
 8001704:	2b03      	cmp	r3, #3
 8001706:	d108      	bne.n	800171a <setReceivePipeAddress+0x52>
		case 3:
			bufSize = 0x03;
 8001708:	2303      	movs	r3, #3
 800170a:	617b      	str	r3, [r7, #20]
			break;
 800170c:	e007      	b.n	800171e <setReceivePipeAddress+0x56>
		case 4:
			bufSize = 0x04;
 800170e:	2304      	movs	r3, #4
 8001710:	617b      	str	r3, [r7, #20]
			break;
 8001712:	e004      	b.n	800171e <setReceivePipeAddress+0x56>
		case 5:
			bufSize = 0x05;
 8001714:	2305      	movs	r3, #5
 8001716:	617b      	str	r3, [r7, #20]
			break;
 8001718:	e001      	b.n	800171e <setReceivePipeAddress+0x56>
		default:
			return ERR_CODE;
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	e064      	b.n	80017e8 <setReceivePipeAddress+0x120>
			break;
		}
		if (pipe == 0) {	//check pipe and write addr to struct
 800171e:	7afb      	ldrb	r3, [r7, #11]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <setReceivePipeAddress+0x82>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	74fb      	strb	r3, [r7, #19]
 8001728:	e00b      	b.n	8001742 <setReceivePipeAddress+0x7a>
				nrfStruct->addrStruct.rxAddr0[i] = addrBuf[i];
 800172a:	7cfb      	ldrb	r3, [r7, #19]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	441a      	add	r2, r3
 8001730:	7cfb      	ldrb	r3, [r7, #19]
 8001732:	7811      	ldrb	r1, [r2, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	460a      	mov	r2, r1
 800173a:	759a      	strb	r2, [r3, #22]
			for (i = 0; i < addrBufSize; i++) {
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	3301      	adds	r3, #1
 8001740:	74fb      	strb	r3, [r7, #19]
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d8ef      	bhi.n	800172a <setReceivePipeAddress+0x62>
			}
		}
		if (pipe == 1) {
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d141      	bne.n	80017d4 <setReceivePipeAddress+0x10c>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	74bb      	strb	r3, [r7, #18]
 8001754:	e00b      	b.n	800176e <setReceivePipeAddress+0xa6>
				nrfStruct->addrStruct.rxAddr1[i] = addrBuf[i];
 8001756:	7cbb      	ldrb	r3, [r7, #18]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	441a      	add	r2, r3
 800175c:	7cbb      	ldrb	r3, [r7, #18]
 800175e:	7811      	ldrb	r1, [r2, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	460a      	mov	r2, r1
 8001766:	76da      	strb	r2, [r3, #27]
			for (i = 0; i < addrBufSize; i++) {
 8001768:	7cbb      	ldrb	r3, [r7, #18]
 800176a:	3301      	adds	r3, #1
 800176c:	74bb      	strb	r3, [r7, #18]
 800176e:	7cbb      	ldrb	r3, [r7, #18]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d8ef      	bhi.n	8001756 <setReceivePipeAddress+0x8e>
		if (pipe == 1) {
 8001776:	e02d      	b.n	80017d4 <setReceivePipeAddress+0x10c>
			}
		}
	} else {
		if (addrBufSize == 1)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <setReceivePipeAddress+0xba>
			bufSize = 0x01;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
		switch (pipe) {	//check pipe and write addr to struct
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	3b02      	subs	r3, #2
 8001786:	2b03      	cmp	r3, #3
 8001788:	d822      	bhi.n	80017d0 <setReceivePipeAddress+0x108>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <setReceivePipeAddress+0xc8>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a1 	.word	0x080017a1
 8001794:	080017ad 	.word	0x080017ad
 8001798:	080017b9 	.word	0x080017b9
 800179c:	080017c5 	.word	0x080017c5
		case 2:
			nrfStruct->addrStruct.rxAddr2 = *addrBuf;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 80017aa:	e013      	b.n	80017d4 <setReceivePipeAddress+0x10c>
		case 3:
			nrfStruct->addrStruct.rxAddr3 = *addrBuf;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 80017b6:	e00d      	b.n	80017d4 <setReceivePipeAddress+0x10c>
		case 4:
			nrfStruct->addrStruct.rxAddr4 = *addrBuf;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 80017c2:	e007      	b.n	80017d4 <setReceivePipeAddress+0x10c>
		case 5:
			nrfStruct->addrStruct.rxAddr5 = *addrBuf;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			break;
 80017ce:	e001      	b.n	80017d4 <setReceivePipeAddress+0x10c>
		default:
			return ERR_CODE;
 80017d0:	23ff      	movs	r3, #255	; 0xff
 80017d2:	e009      	b.n	80017e8 <setReceivePipeAddress+0x120>
			break;
		}
	}
	uint8_t addr = RX_ADDR_P0 + pipe; //if pipe = 0 -> write Receive address pipe 0
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	330a      	adds	r3, #10
 80017d8:	747b      	strb	r3, [r7, #17]
	writeRegExt(nrfStruct, addr, addrBuf, bufSize);
 80017da:	7c79      	ldrb	r1, [r7, #17]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff f956 	bl	8000a92 <writeRegExt>

	return OK_CODE;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <setTransmitPipeAddress>:

/* Transmit address data pipe */
uint8_t setTransmitPipeAddress(nrfStruct_t *nrfStruct, uint8_t *addrBuf,
		size_t addrBufSize)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	if (((nrfStruct->addrStruct.addrWidth) + 2) != addrBufSize) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7c1b      	ldrb	r3, [r3, #16]
 8001800:	3302      	adds	r3, #2
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4293      	cmp	r3, r2
 8001808:	d001      	beq.n	800180e <setTransmitPipeAddress+0x1e>
		return ERR_CODE;
 800180a:	23ff      	movs	r3, #255	; 0xff
 800180c:	e019      	b.n	8001842 <setTransmitPipeAddress+0x52>
	}

	uint8_t i;
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
 8001812:	e00b      	b.n	800182c <setTransmitPipeAddress+0x3c>
		nrfStruct->addrStruct.txAddr[i] = addrBuf[i];
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	441a      	add	r2, r3
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	7811      	ldrb	r1, [r2, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	460a      	mov	r2, r1
 8001824:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	3301      	adds	r3, #1
 800182a:	75fb      	strb	r3, [r7, #23]
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8ef      	bhi.n	8001814 <setTransmitPipeAddress+0x24>
	}
	writeRegExt(nrfStruct, TX_ADDR, addrBuf, addrBufSize);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	2110      	movs	r1, #16
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff f929 	bl	8000a92 <writeRegExt>
	return OK_CODE;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <setRxPayloadWidth>:
	}
	return ERR_CODE;
}

uint8_t setRxPayloadWidth(nrfStruct_t *nrfStruct, uint8_t pipe, uint8_t width)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
 8001856:	4613      	mov	r3, r2
 8001858:	70bb      	strb	r3, [r7, #2]
	if (checkPipe(pipe))
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fde4 	bl	800142a <checkPipe>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <setRxPayloadWidth+0x4e>
	{
		if (width < 1 && width > 32) { //check width correct value
 8001868:	78bb      	ldrb	r3, [r7, #2]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <setRxPayloadWidth+0x2e>
 800186e:	78bb      	ldrb	r3, [r7, #2]
 8001870:	2b20      	cmp	r3, #32
 8001872:	d901      	bls.n	8001878 <setRxPayloadWidth+0x2e>
			return ERR_CODE;
 8001874:	23ff      	movs	r3, #255	; 0xff
 8001876:	e010      	b.n	800189a <setRxPayloadWidth+0x50>
		}
		uint8_t addr = RX_PW_P0 + pipe;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	3311      	adds	r3, #17
 800187c:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, addr, width);
 800187e:	78ba      	ldrb	r2, [r7, #2]
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff f8d8 	bl	8000a3a <writeReg>
		nrfStruct->setStruct.pipePayLen[pipe] = width;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	78ba      	ldrb	r2, [r7, #2]
 8001892:	725a      	strb	r2, [r3, #9]
		return OK_CODE;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <setRxPayloadWidth+0x50>
	}
	return ERR_CODE;
 8001898:	23ff      	movs	r3, #255	; 0xff
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <enableDynamicPayloadLengthPipe>:
	return TX_REUSE_UNUSED;
}

/* Dynamic Payload Lenggth */
uint8_t enableDynamicPayloadLengthPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
	if (!checkPipe(pipe))
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fdba 	bl	800142a <checkPipe>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <enableDynamicPayloadLengthPipe+0x1e>
	{
		return ERR_CODE;
 80018bc:	23ff      	movs	r3, #255	; 0xff
 80018be:	e013      	b.n	80018e8 <enableDynamicPayloadLengthPipe+0x46>
	}
	setBit(nrfStruct, DYNPD, pipe);
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	461a      	mov	r2, r3
 80018c4:	211c      	movs	r1, #28
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fa01 	bl	8000cce <setBit>
	nrfStruct->setStruct.pipeDPL |= (1 << pipe);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7a1b      	ldrb	r3, [r3, #8]
 80018d0:	b25a      	sxtb	r2, r3
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	721a      	strb	r2, [r3, #8]
	return OK_CODE;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <enableDynamicPayloadLength>:
	nrfStruct->setStruct.pipeDPL |= (0 << pipe);
	return OK_CODE;
}
/* Feature */
void enableDynamicPayloadLength(nrfStruct_t *nrfStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, FEATURE, EN_DPL);
 80018f8:	2202      	movs	r2, #2
 80018fa:	211d      	movs	r1, #29
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff f9e6 	bl	8000cce <setBit>
	nrfStruct->setStruct.enableDPL = 1;
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	7bd3      	ldrb	r3, [r2, #15]
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	73d3      	strb	r3, [r2, #15]
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_SPI1_Init+0x64>)
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <MX_SPI1_Init+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_SPI1_Init+0x64>)
 8001920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_SPI1_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_SPI1_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_SPI1_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_SPI1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_SPI1_Init+0x64>)
 8001940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001944:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_SPI1_Init+0x64>)
 8001948:	2218      	movs	r2, #24
 800194a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_SPI1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_SPI1_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_SPI1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_SPI1_Init+0x64>)
 8001960:	220a      	movs	r2, #10
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_SPI1_Init+0x64>)
 8001966:	f001 f891 	bl	8002a8c <HAL_SPI_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001970:	f7ff fc2a 	bl	80011c8 <Error_Handler>
  }

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000c8 	.word	0x200000c8
 800197c:	40013000 	.word	0x40013000

08001980 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_SPI_MspInit+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_SPI_MspInit+0x88>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_SPI_MspInit+0x88>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_SPI_MspInit+0x88>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_SPI_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_SPI_MspInit+0x88>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_SPI_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019da:	23e0      	movs	r3, #224	; 0xe0
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ea:	2305      	movs	r3, #5
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019f6:	f000 fa8d 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab4:	f000 f906 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <SystemInit+0x28>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <SystemInit+0x28>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SystemInit+0x28>)
 8001ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <MX_TIM1_Init+0x9c>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b0c:	2247      	movs	r2, #71	; 0x47
 8001b0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b32:	f001 fcff 	bl	8003534 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b3c:	f7ff fb44 	bl	80011c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b4e:	f001 fd40 	bl	80035d2 <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b58:	f7ff fb36 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b6a:	f001 ff03 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b74:	f7ff fb28 	bl	80011c8 <Error_Handler>
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000120 	.word	0x20000120
 8001b84:	40010000 	.word	0x40010000

08001b88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10d      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_TIM_Base_MspInit+0x40>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_TIM_Base_MspInit+0x40>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_TIM_Base_MspInit+0x40>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40023800 	.word	0x40023800

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bd2:	e003      	b.n	8001bdc <LoopCopyDataInit>

08001bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bda:	3104      	adds	r1, #4

08001bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001be4:	d3f6      	bcc.n	8001bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001be8:	e002      	b.n	8001bf0 <LoopFillZerobss>

08001bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bec:	f842 3b04 	str.w	r3, [r2], #4

08001bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bf4:	d3f9      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff ff61 	bl	8001abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f001 ff29 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff f967 	bl	8000ed0 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c08:	08003ae0 	.word	0x08003ae0
  ldr  r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c10:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001c14:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001c18:	20000164 	.word	0x20000164

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f92f 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fedc 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f939 	bl	8001efa <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f90f 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	2000001c 	.word	0x2000001c
 8001cc0:	20000018 	.word	0x20000018

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000001c 	.word	0x2000001c
 8001ce8:	20000160 	.word	0x20000160

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000160 	.word	0x20000160

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_Delay+0x40>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000001c 	.word	0x2000001c

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff47 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff5c 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffb0 	bl	8001e68 <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e159      	b.n	80021e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8148 	bne.w	80021de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d00b      	beq.n	8001f6e <HAL_GPIO_Init+0x5a>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f62:	2b11      	cmp	r3, #17
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0xfc>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a2 	beq.w	80021de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_GPIO_Init+0x2e4>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a55      	ldr	r2, [pc, #340]	; (80021f8 <HAL_GPIO_Init+0x2e4>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_GPIO_Init+0x2e4>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_GPIO_Init+0x2e8>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a48      	ldr	r2, [pc, #288]	; (8002200 <HAL_GPIO_Init+0x2ec>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x202>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a47      	ldr	r2, [pc, #284]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x1fe>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a46      	ldr	r2, [pc, #280]	; (8002208 <HAL_GPIO_Init+0x2f4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x1fa>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a45      	ldr	r2, [pc, #276]	; (800220c <HAL_GPIO_Init+0x2f8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x1f6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_GPIO_Init+0x2fc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x1f2>
 8002102:	2304      	movs	r3, #4
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002106:	2307      	movs	r3, #7
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x204>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x204>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002116:	2300      	movs	r3, #0
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002128:	4934      	ldr	r1, [pc, #208]	; (80021fc <HAL_GPIO_Init+0x2e8>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_GPIO_Init+0x300>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215a:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_GPIO_Init+0x300>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_GPIO_Init+0x300>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002184:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_GPIO_Init+0x300>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_GPIO_Init+0x300>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_GPIO_Init+0x300>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_GPIO_Init+0x300>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_GPIO_Init+0x300>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	f67f aea2 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	3724      	adds	r7, #36	; 0x24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e001      	b.n	800223a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e25b      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d075      	beq.n	8002386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229a:	4ba3      	ldr	r3, [pc, #652]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d00c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a6:	4ba0      	ldr	r3, [pc, #640]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d112      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b2:	4b9d      	ldr	r3, [pc, #628]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022be:	d10b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b99      	ldr	r3, [pc, #612]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d05b      	beq.n	8002384 <HAL_RCC_OscConfig+0x108>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d157      	bne.n	8002384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e236      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x74>
 80022e2:	4b91      	ldr	r3, [pc, #580]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a90      	ldr	r2, [pc, #576]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xb0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x98>
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a8a      	ldr	r2, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a87      	ldr	r2, [pc, #540]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xb0>
 8002314:	4b84      	ldr	r3, [pc, #528]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a83      	ldr	r2, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a80      	ldr	r2, [pc, #512]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fcda 	bl	8001cec <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fcd6 	bl	8001cec <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1fb      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xc0>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fcc6 	bl	8001cec <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fcc2 	bl	8001cec <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1e7      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0xe8>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x152>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1bb      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4952      	ldr	r1, [pc, #328]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <HAL_RCC_OscConfig+0x2b0>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7ff fc7b 	bl	8001cec <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff fc77 	bl	8001cec <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e19c      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4940      	ldr	r1, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_OscConfig+0x2b0>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff fc5a 	bl	8001cec <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff fc56 	bl	8001cec <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e17b      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d030      	beq.n	80024c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_OscConfig+0x2b4>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7ff fc3a 	bl	8001cec <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247c:	f7ff fc36 	bl	8001cec <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e15b      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x200>
 800249a:	e015      	b.n	80024c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x2b4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fc23 	bl	8001cec <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024aa:	f7ff fc1f 	bl	8001cec <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e144      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a0 	beq.w	8002616 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10f      	bne.n	8002506 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x2b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d121      	bne.n	8002556 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_RCC_OscConfig+0x2b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_RCC_OscConfig+0x2b8>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff fbe5 	bl	8001cec <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e011      	b.n	800254a <HAL_RCC_OscConfig+0x2ce>
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	42470000 	.word	0x42470000
 8002530:	42470e80 	.word	0x42470e80
 8002534:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7ff fbd8 	bl	8001cec <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0fd      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x4d4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d106      	bne.n	800256c <HAL_RCC_OscConfig+0x2f0>
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	e01c      	b.n	80025a6 <HAL_RCC_OscConfig+0x32a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d10c      	bne.n	800258e <HAL_RCC_OscConfig+0x312>
 8002574:	4b77      	ldr	r3, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	4a76      	ldr	r2, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	6713      	str	r3, [r2, #112]	; 0x70
 8002580:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a73      	ldr	r2, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	e00b      	b.n	80025a6 <HAL_RCC_OscConfig+0x32a>
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a70      	ldr	r2, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	4b6e      	ldr	r3, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d015      	beq.n	80025da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7ff fb9d 	bl	8001cec <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff fb99 	bl	8001cec <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0bc      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ee      	beq.n	80025b6 <HAL_RCC_OscConfig+0x33a>
 80025d8:	e014      	b.n	8002604 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7ff fb87 	bl	8001cec <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7ff fb83 	bl	8001cec <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0a6      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8092 	beq.w	8002744 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002620:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d05c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d141      	bne.n	80026b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff fb57 	bl	8001cec <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff fb53 	bl	8001cec <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e078      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002654:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	019b      	lsls	r3, r3, #6
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	3b01      	subs	r3, #1
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	061b      	lsls	r3, r3, #24
 8002684:	4933      	ldr	r1, [pc, #204]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268a:	4b33      	ldr	r3, [pc, #204]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fb2c 	bl	8001cec <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fb28 	bl	8001cec <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e04d      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x41c>
 80026b6:	e045      	b.n	8002744 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff fb15 	bl	8001cec <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c6:	f7ff fb11 	bl	8001cec <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e036      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x44a>
 80026e4:	e02e      	b.n	8002744 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e029      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_OscConfig+0x4d8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	429a      	cmp	r2, r3
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d115      	bne.n	8002740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800271a:	4013      	ands	r3, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002720:	4293      	cmp	r3, r2
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40007000 	.word	0x40007000
 8002754:	40023800 	.word	0x40023800
 8002758:	42470060 	.word	0x42470060

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0cc      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b68      	ldr	r3, [pc, #416]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d90c      	bls.n	8002798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0b8      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b0:	4b59      	ldr	r3, [pc, #356]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	494d      	ldr	r1, [pc, #308]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d044      	beq.n	800287c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d119      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e07f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	2b03      	cmp	r3, #3
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e067      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4934      	ldr	r1, [pc, #208]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7ff fa4e 	bl	8001cec <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7ff fa4a 	bl	8001cec <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e04f      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d20c      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e032      	b.n	800290a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028e2:	f000 f821 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	fa21 f303 	lsr.w	r3, r1, r3
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f9ae 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00
 8002918:	40023800 	.word	0x40023800
 800291c:	08003ac0 	.word	0x08003ac0
 8002920:	20000014 	.word	0x20000014
 8002924:	20000018 	.word	0x20000018

08002928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	2300      	movs	r3, #0
 8002938:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d007      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x32>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d008      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x38>
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 808d 	bne.w	8002a6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002956:	60bb      	str	r3, [r7, #8]
       break;
 8002958:	e08c      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800295a:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x160>)
 800295c:	60bb      	str	r3, [r7, #8]
      break;
 800295e:	e089      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002960:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002968:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800296a:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x158>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d023      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002976:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	f04f 0400 	mov.w	r4, #0
 8002980:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	ea03 0501 	and.w	r5, r3, r1
 800298c:	ea04 0602 	and.w	r6, r4, r2
 8002990:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x160>)
 8002992:	fb02 f106 	mul.w	r1, r2, r6
 8002996:	2200      	movs	r2, #0
 8002998:	fb02 f205 	mul.w	r2, r2, r5
 800299c:	440a      	add	r2, r1
 800299e:	493a      	ldr	r1, [pc, #232]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a0:	fba5 0101 	umull	r0, r1, r5, r1
 80029a4:	1853      	adds	r3, r2, r1
 80029a6:	4619      	mov	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f04f 0400 	mov.w	r4, #0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4623      	mov	r3, r4
 80029b2:	f7fd fc11 	bl	80001d8 <__aeabi_uldivmod>
 80029b6:	4603      	mov	r3, r0
 80029b8:	460c      	mov	r4, r1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e049      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	ea03 0501 	and.w	r5, r3, r1
 80029d4:	ea04 0602 	and.w	r6, r4, r2
 80029d8:	4629      	mov	r1, r5
 80029da:	4632      	mov	r2, r6
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	0154      	lsls	r4, r2, #5
 80029e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029ea:	014b      	lsls	r3, r1, #5
 80029ec:	4619      	mov	r1, r3
 80029ee:	4622      	mov	r2, r4
 80029f0:	1b49      	subs	r1, r1, r5
 80029f2:	eb62 0206 	sbc.w	r2, r2, r6
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	0194      	lsls	r4, r2, #6
 8002a00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a04:	018b      	lsls	r3, r1, #6
 8002a06:	1a5b      	subs	r3, r3, r1
 8002a08:	eb64 0402 	sbc.w	r4, r4, r2
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	00e2      	lsls	r2, r4, #3
 8002a16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a1a:	00d9      	lsls	r1, r3, #3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4614      	mov	r4, r2
 8002a20:	195b      	adds	r3, r3, r5
 8002a22:	eb44 0406 	adc.w	r4, r4, r6
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	02a2      	lsls	r2, r4, #10
 8002a30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a34:	0299      	lsls	r1, r3, #10
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	461a      	mov	r2, r3
 8002a46:	4623      	mov	r3, r4
 8002a48:	f7fd fbc6 	bl	80001d8 <__aeabi_uldivmod>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	460c      	mov	r4, r1
 8002a50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	60bb      	str	r3, [r7, #8]
      break;
 8002a6c:	e002      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a70:	60bb      	str	r3, [r7, #8]
      break;
 8002a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a74:	68bb      	ldr	r3, [r7, #8]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	017d7840 	.word	0x017d7840

08002a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e056      	b.n	8002b4c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fe ff61 	bl	8001980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	ea42 0103 	orr.w	r1, r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	f003 0104 	and.w	r1, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_SPI_Transmit+0x22>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e11e      	b.n	8002db4 <HAL_SPI_Transmit+0x260>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7e:	f7ff f8b5 	bl	8001cec <HAL_GetTick>
 8002b82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d002      	beq.n	8002b9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b98:	e103      	b.n	8002da2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_SPI_Transmit+0x52>
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002baa:	e0fa      	b.n	8002da2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf2:	d107      	bne.n	8002c04 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d007      	beq.n	8002c22 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2a:	d14b      	bne.n	8002cc4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_SPI_Transmit+0xe6>
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d13e      	bne.n	8002cb8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c5e:	e02b      	b.n	8002cb8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d112      	bne.n	8002c94 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	881a      	ldrh	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	1c9a      	adds	r2, r3, #2
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c92:	e011      	b.n	8002cb8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c94:	f7ff f82a 	bl	8001cec <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d803      	bhi.n	8002cac <HAL_SPI_Transmit+0x158>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002caa:	d102      	bne.n	8002cb2 <HAL_SPI_Transmit+0x15e>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cb6:	e074      	b.n	8002da2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ce      	bne.n	8002c60 <HAL_SPI_Transmit+0x10c>
 8002cc2:	e04c      	b.n	8002d5e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_SPI_Transmit+0x17e>
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d140      	bne.n	8002d54 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cf8:	e02c      	b.n	8002d54 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d113      	bne.n	8002d30 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d2e:	e011      	b.n	8002d54 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d30:	f7fe ffdc 	bl	8001cec <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d803      	bhi.n	8002d48 <HAL_SPI_Transmit+0x1f4>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x1fa>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d52:	e026      	b.n	8002da2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1cd      	bne.n	8002cfa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fba4 	bl	80034b0 <SPI_EndRxTxTransaction>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	77fb      	strb	r3, [r7, #31]
 8002d9e:	e000      	b.n	8002da2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002da0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd8:	d112      	bne.n	8002e00 <HAL_SPI_Receive+0x44>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2204      	movs	r2, #4
 8002de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8e9 	bl	8002fce <HAL_SPI_TransmitReceive>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	e0e2      	b.n	8002fc6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_SPI_Receive+0x52>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0db      	b.n	8002fc6 <HAL_SPI_Receive+0x20a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e16:	f7fe ff69 	bl	8001cec <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e2c:	e0c2      	b.n	8002fb4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_SPI_Receive+0x7e>
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e3e:	e0b9      	b.n	8002fb4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2204      	movs	r2, #4
 8002e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	88fa      	ldrh	r2, [r7, #6]
 8002e5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e86:	d107      	bne.n	8002e98 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d007      	beq.n	8002eb6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d162      	bne.n	8002f84 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ebe:	e02e      	b.n	8002f1e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d115      	bne.n	8002efa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f103 020c 	add.w	r2, r3, #12
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ef8:	e011      	b.n	8002f1e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efa:	f7fe fef7 	bl	8001cec <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d803      	bhi.n	8002f12 <HAL_SPI_Receive+0x156>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Receive+0x15c>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f1c:	e04a      	b.n	8002fb4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1cb      	bne.n	8002ec0 <HAL_SPI_Receive+0x104>
 8002f28:	e031      	b.n	8002f8e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d113      	bne.n	8002f60 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	b292      	uxth	r2, r2
 8002f44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	1c9a      	adds	r2, r3, #2
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f5e:	e011      	b.n	8002f84 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f60:	f7fe fec4 	bl	8001cec <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d803      	bhi.n	8002f78 <HAL_SPI_Receive+0x1bc>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d102      	bne.n	8002f7e <HAL_SPI_Receive+0x1c2>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f82:	e017      	b.n	8002fb4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1cd      	bne.n	8002f2a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	6839      	ldr	r1, [r7, #0]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa27 	bl	80033e6 <SPI_EndRxTransaction>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
 8002fb0:	e000      	b.n	8002fb4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08c      	sub	sp, #48	; 0x30
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_SPI_TransmitReceive+0x26>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e18a      	b.n	800330a <HAL_SPI_TransmitReceive+0x33c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ffc:	f7fe fe76 	bl	8001cec <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800301a:	2b01      	cmp	r3, #1
 800301c:	d00f      	beq.n	800303e <HAL_SPI_TransmitReceive+0x70>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003024:	d107      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x68>
 800302e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003032:	2b04      	cmp	r3, #4
 8003034:	d003      	beq.n	800303e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800303c:	e15b      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x82>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x82>
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003056:	e14e      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b04      	cmp	r3, #4
 8003062:	d003      	beq.n	800306c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2205      	movs	r2, #5
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	887a      	ldrh	r2, [r7, #2]
 800308e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d007      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	d178      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x10a>
 80030d2:	8b7b      	ldrh	r3, [r7, #26]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d166      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030fc:	e053      	b.n	80031a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d11b      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x176>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x176>
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d113      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d119      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x1b8>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d014      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	b292      	uxth	r2, r2
 8003168:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003186:	f7fe fdb1 	bl	8001cec <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003192:	429a      	cmp	r2, r3
 8003194:	d807      	bhi.n	80031a6 <HAL_SPI_TransmitReceive+0x1d8>
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d003      	beq.n	80031a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031a4:	e0a7      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1a6      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x130>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1a1      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x130>
 80031ba:	e07c      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x1fc>
 80031c4:	8b7b      	ldrh	r3, [r7, #26]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d16b      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f0:	e057      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d11c      	bne.n	800323a <HAL_SPI_TransmitReceive+0x26c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d017      	beq.n	800323a <HAL_SPI_TransmitReceive+0x26c>
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d114      	bne.n	800323a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d119      	bne.n	800327c <HAL_SPI_TransmitReceive+0x2ae>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003278:	2301      	movs	r3, #1
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800327c:	f7fe fd36 	bl	8001cec <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003288:	429a      	cmp	r2, r3
 800328a:	d803      	bhi.n	8003294 <HAL_SPI_TransmitReceive+0x2c6>
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d102      	bne.n	800329a <HAL_SPI_TransmitReceive+0x2cc>
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032a0:	e029      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1a2      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x224>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d19d      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8f8 	bl	80034b0 <SPI_EndRxTxTransaction>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032d2:	e010      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	e000      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80032f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800330a:	4618      	mov	r0, r3
 800330c:	3730      	adds	r7, #48	; 0x30
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003322:	e04c      	b.n	80033be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d048      	beq.n	80033be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800332c:	f7fe fcde 	bl	8001cec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d902      	bls.n	8003342 <SPI_WaitFlagStateUntilTimeout+0x30>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d13d      	bne.n	80033be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335a:	d111      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d004      	beq.n	8003370 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d107      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d10f      	bne.n	80033aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e00f      	b.n	80033de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d1a3      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fa:	d111      	bne.n	8003420 <SPI_EndRxTransaction+0x3a>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003404:	d004      	beq.n	8003410 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d107      	bne.n	8003420 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003428:	d12a      	bne.n	8003480 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d012      	beq.n	800345a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff ff67 	bl	8003312 <SPI_WaitFlagStateUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02d      	beq.n	80034a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e026      	b.n	80034a8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	2101      	movs	r1, #1
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff ff54 	bl	8003312 <SPI_WaitFlagStateUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01a      	beq.n	80034a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e013      	b.n	80034a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	2101      	movs	r1, #1
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff41 	bl	8003312 <SPI_WaitFlagStateUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e000      	b.n	80034a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <SPI_EndRxTxTransaction+0x7c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <SPI_EndRxTxTransaction+0x80>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0d5b      	lsrs	r3, r3, #21
 80034c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034da:	d112      	bne.n	8003502 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff ff13 	bl	8003312 <SPI_WaitFlagStateUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e00f      	b.n	8003522 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3b01      	subs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d0f2      	beq.n	8003502 <SPI_EndRxTxTransaction+0x52>
 800351c:	e000      	b.n	8003520 <SPI_EndRxTxTransaction+0x70>
        break;
 800351e:	bf00      	nop
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000014 	.word	0x20000014
 8003530:	165e9f81 	.word	0x165e9f81

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e01d      	b.n	8003582 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fb14 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 f8e4 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d007      	beq.n	80035bc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_ConfigClockSource+0x18>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0a6      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x166>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003608:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003610:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d067      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x120>
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d80b      	bhi.n	800363e <HAL_TIM_ConfigClockSource+0x6c>
 8003626:	2b10      	cmp	r3, #16
 8003628:	d073      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x140>
 800362a:	2b10      	cmp	r3, #16
 800362c:	d802      	bhi.n	8003634 <HAL_TIM_ConfigClockSource+0x62>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d06f      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003632:	e078      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003634:	2b20      	cmp	r3, #32
 8003636:	d06c      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x140>
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d06a      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800363c:	e073      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800363e:	2b70      	cmp	r3, #112	; 0x70
 8003640:	d00d      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x8c>
 8003642:	2b70      	cmp	r3, #112	; 0x70
 8003644:	d804      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x7e>
 8003646:	2b50      	cmp	r3, #80	; 0x50
 8003648:	d033      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0xe0>
 800364a:	2b60      	cmp	r3, #96	; 0x60
 800364c:	d041      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800364e:	e06a      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d066      	beq.n	8003724 <HAL_TIM_ConfigClockSource+0x152>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365a:	d017      	beq.n	800368c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800365c:	e063      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f000 f961 	bl	8003934 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003680:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	609a      	str	r2, [r3, #8]
      break;
 800368a:	e04c      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f000 f94a 	bl	8003934 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ae:	609a      	str	r2, [r3, #8]
      break;
 80036b0:	e039      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 f8be 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2150      	movs	r1, #80	; 0x50
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f917 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80036d0:	e029      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 f8dd 	bl	800389e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2160      	movs	r1, #96	; 0x60
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f907 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80036f0:	e019      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 f89e 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2140      	movs	r1, #64	; 0x40
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f8f7 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 8003710:	e009      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	4610      	mov	r0, r2
 800371e:	f000 f8ee 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 8003722:	e000      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003724:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a34      	ldr	r2, [pc, #208]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00f      	beq.n	8003778 <TIM_Base_SetConfig+0x38>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d00b      	beq.n	8003778 <TIM_Base_SetConfig+0x38>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <TIM_Base_SetConfig+0xe8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <TIM_Base_SetConfig+0x38>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a30      	ldr	r2, [pc, #192]	; (800382c <TIM_Base_SetConfig+0xec>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_Base_SetConfig+0x38>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <TIM_Base_SetConfig+0xf0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d108      	bne.n	800378a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a25      	ldr	r2, [pc, #148]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01b      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d017      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <TIM_Base_SetConfig+0xe8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a21      	ldr	r2, [pc, #132]	; (800382c <TIM_Base_SetConfig+0xec>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00f      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <TIM_Base_SetConfig+0xf0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <TIM_Base_SetConfig+0xf4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <TIM_Base_SetConfig+0xf8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_Base_SetConfig+0x8a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <TIM_Base_SetConfig+0xfc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389e:	b480      	push	{r7}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0210 	bic.w	r2, r3, #16
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	f043 0307 	orr.w	r3, r3, #7
 8003920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	021a      	lsls	r2, r3, #8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	431a      	orrs	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003988:	2302      	movs	r3, #2
 800398a:	e050      	b.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d013      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10c      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40014000 	.word	0x40014000

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4e0d      	ldr	r6, [pc, #52]	; (8003a88 <__libc_init_array+0x38>)
 8003a54:	4c0d      	ldr	r4, [pc, #52]	; (8003a8c <__libc_init_array+0x3c>)
 8003a56:	1ba4      	subs	r4, r4, r6
 8003a58:	10a4      	asrs	r4, r4, #2
 8003a5a:	2500      	movs	r5, #0
 8003a5c:	42a5      	cmp	r5, r4
 8003a5e:	d109      	bne.n	8003a74 <__libc_init_array+0x24>
 8003a60:	4e0b      	ldr	r6, [pc, #44]	; (8003a90 <__libc_init_array+0x40>)
 8003a62:	4c0c      	ldr	r4, [pc, #48]	; (8003a94 <__libc_init_array+0x44>)
 8003a64:	f000 f820 	bl	8003aa8 <_init>
 8003a68:	1ba4      	subs	r4, r4, r6
 8003a6a:	10a4      	asrs	r4, r4, #2
 8003a6c:	2500      	movs	r5, #0
 8003a6e:	42a5      	cmp	r5, r4
 8003a70:	d105      	bne.n	8003a7e <__libc_init_array+0x2e>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a78:	4798      	blx	r3
 8003a7a:	3501      	adds	r5, #1
 8003a7c:	e7ee      	b.n	8003a5c <__libc_init_array+0xc>
 8003a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a82:	4798      	blx	r3
 8003a84:	3501      	adds	r5, #1
 8003a86:	e7f2      	b.n	8003a6e <__libc_init_array+0x1e>
 8003a88:	08003ad8 	.word	0x08003ad8
 8003a8c:	08003ad8 	.word	0x08003ad8
 8003a90:	08003ad8 	.word	0x08003ad8
 8003a94:	08003adc 	.word	0x08003adc

08003a98 <memset>:
 8003a98:	4402      	add	r2, r0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <memset+0xa>
 8003aa0:	4770      	bx	lr
 8003aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa6:	e7f9      	b.n	8003a9c <memset+0x4>

08003aa8 <_init>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr

08003ab4 <_fini>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr
